/* tslint:disable */
/* eslint-disable */
/**
 * KU-KEY API
 * API for KU-KEY service
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'

// @ts-ignore
import { GetNoticeResponseDto } from '../models'
/**
 * NoticeApi - axios parameter creator
 * @export
 */
/**
 * 받았던 알림들을 조회합니다. 커뮤니티 관련 알림일 경우 해당 게시글의 Id를 함께 반환합니다.
 * @summary 알림 조회
 * @param {number} [take] 한 페이지에 담을 데이터 수, default &#x3D; 10
 * @param {string} [cursor] 커서 값, 14자리 숫자로 이루어진 문자열, 없으면 첫페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const noticeGetAxiosParamCreator = async (
  take?: number,
  cursor?: string,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/notice`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (take !== undefined) {
    localVarQueryParameter['take'] = take
  }

  if (cursor !== undefined) {
    localVarQueryParameter['cursor'] = cursor
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * SSE를 통해 서버에서 넘겨주는 알림을 연결합니다.
 * @summary 알림 연결
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const noticeSseGetAxiosParamCreator = async (
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/notice/sse`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * SSE를 통해 서버에서 넘겨주는 알림을 연결합니다. (access토큰 만료됨에 따라 연결이 끊길 경우 사용)
 * @summary 알림 연결
 * @param {number} userId
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const noticeSseUserIdGetAxiosParamCreator = async (
  userId: number,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/notice/sse/{userId}`.replace(`{${'userId'}}`, encodeURIComponent(String(userId)))
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}

/**
 * NoticeApi - functional programming interface
 * @export
 */
/**
 * 받았던 알림들을 조회합니다. 커뮤니티 관련 알림일 경우 해당 게시글의 Id를 함께 반환합니다.
 * @summary 알림 조회
 * @param {number} [take] 한 페이지에 담을 데이터 수, default &#x3D; 10
 * @param {string} [cursor] 커서 값, 14자리 숫자로 이루어진 문자열, 없으면 첫페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const noticeGetFp = async (
  take?: number,
  cursor?: string,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNoticeResponseDto>> => {
  const localVarAxiosArgs = await noticeGetAxiosParamCreator(take, cursor, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * SSE를 통해 서버에서 넘겨주는 알림을 연결합니다.
 * @summary 알림 연결
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const noticeSseGetFp = async (
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> => {
  const localVarAxiosArgs = await noticeSseGetAxiosParamCreator(options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * SSE를 통해 서버에서 넘겨주는 알림을 연결합니다. (access토큰 만료됨에 따라 연결이 끊길 경우 사용)
 * @summary 알림 연결
 * @param {number} userId
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const noticeSseUserIdGetFp = async (
  userId: number,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> => {
  const localVarAxiosArgs = await noticeSseUserIdGetAxiosParamCreator(userId, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}

/**
 * NoticeApi - factory interface
 * @export
 */

export type NoticeGetRequestParams = {
  take?: number
  cursor?: string
  options?: any
}

/**
 * 받았던 알림들을 조회합니다. 커뮤니티 관련 알림일 경우 해당 게시글의 Id를 함께 반환합니다.
 * @summary 알림 조회
 * @param {number} [take] 한 페이지에 담을 데이터 수, default &#x3D; 10
 * @param {string} [cursor] 커서 값, 14자리 숫자로 이루어진 문자열, 없으면 첫페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const noticeGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: NoticeGetRequestParams): AxiosPromise<GetNoticeResponseDto> => {
    return noticeGetFp(params.take, params.cursor, params.options, configuration).then(request =>
      request(axios, basePath),
    )
  }
}

export type NoticeSseGetRequestParams = {
  options?: any
}

/**
 * SSE를 통해 서버에서 넘겨주는 알림을 연결합니다.
 * @summary 알림 연결
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const noticeSseGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params?: { options?: any }): AxiosPromise<void> => {
    return noticeSseGetFp(params?.options, configuration).then(request => request(axios, basePath))
  }
}

export type NoticeSseUserIdGetRequestParams = {
  userId: number
  options?: any
}

/**
 * SSE를 통해 서버에서 넘겨주는 알림을 연결합니다. (access토큰 만료됨에 따라 연결이 끊길 경우 사용)
 * @summary 알림 연결
 * @param {number} userId
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const noticeSseUserIdGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: NoticeSseUserIdGetRequestParams): AxiosPromise<void> => {
    return noticeSseUserIdGetFp(params.userId, params.options, configuration).then(request => request(axios, basePath))
  }
}
