/* tslint:disable */
/* eslint-disable */
/**
 * KU-KEY API
 * API for KU-KEY service
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, toPathString, createRequestFunction } from '../common'
// @ts-ignore
import { COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'

// @ts-ignore
import { CommonCourseResponseDto } from '../models'
// @ts-ignore
import { PaginatedCoursesDto } from '../models'
/**
 * CourseApi - axios parameter creator
 * @export
 */
/**
 * 하나의 엔드포인트로 모든 강의검색 로직을 통합했습니다.
 * @summary 강의 검색
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] 커서 id, 값이 존재하지 않으면 첫 페이지
 * @param {'Major' | 'General Studies' | 'Academic Foundations'} [category] 강의 카테고리 (모든 강의, 전공, 교양, 학문의 기초), 모든 강의는 값을 넘겨주지 않음
 * @param {string} [keyword] 검색 키워드 (강의명, 교수명, 학수번호)
 * @param {string} [classification] category가 Major일때 특정 과를, category가 Academic Foundation일 때 특정 단과대를 넣어주세요.
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseGetAxiosParamCreator = async (
  year: string,
  semester: string,
  cursorId?: number,
  category?: 'Major' | 'General Studies' | 'Academic Foundations',
  keyword?: string,
  classification?: string,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/course`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (cursorId !== undefined) {
    localVarQueryParameter['cursorId'] = cursorId
  }

  if (year !== undefined) {
    localVarQueryParameter['year'] = year
  }

  if (semester !== undefined) {
    localVarQueryParameter['semester'] = semester
  }

  if (category !== undefined) {
    localVarQueryParameter['category'] = category
  }

  if (keyword !== undefined) {
    localVarQueryParameter['keyword'] = keyword
  }

  if (classification !== undefined) {
    localVarQueryParameter['classification'] = classification
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 추천 강의를 조회합니다.
 * @summary 추천 강의 조회
 * @param {number} limit 반환 개수
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseRecommendationGetAxiosParamCreator = async (
  limit: number,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/course/recommendation`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (limit !== undefined) {
    localVarQueryParameter['limit'] = limit
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}

/**
 * CourseApi - functional programming interface
 * @export
 */
/**
 * 하나의 엔드포인트로 모든 강의검색 로직을 통합했습니다.
 * @summary 강의 검색
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] 커서 id, 값이 존재하지 않으면 첫 페이지
 * @param {'Major' | 'General Studies' | 'Academic Foundations'} [category] 강의 카테고리 (모든 강의, 전공, 교양, 학문의 기초), 모든 강의는 값을 넘겨주지 않음
 * @param {string} [keyword] 검색 키워드 (강의명, 교수명, 학수번호)
 * @param {string} [classification] category가 Major일때 특정 과를, category가 Academic Foundation일 때 특정 단과대를 넣어주세요.
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseGetFp = async (
  year: string,
  semester: string,
  cursorId?: number,
  category?: 'Major' | 'General Studies' | 'Academic Foundations',
  keyword?: string,
  classification?: string,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCoursesDto>> => {
  const localVarAxiosArgs = await courseGetAxiosParamCreator(
    year,
    semester,
    cursorId,
    category,
    keyword,
    classification,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 추천 강의를 조회합니다.
 * @summary 추천 강의 조회
 * @param {number} limit 반환 개수
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseRecommendationGetFp = async (
  limit: number,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommonCourseResponseDto>>> => {
  const localVarAxiosArgs = await courseRecommendationGetAxiosParamCreator(limit, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}

/**
 * CourseApi - factory interface
 * @export
 */

export type CourseGetRequestParams = {
  year: string
  semester: string
  cursorId?: number
  category?: 'Major' | 'General Studies' | 'Academic Foundations'
  keyword?: string
  classification?: string
  options?: any
}

/**
 * 하나의 엔드포인트로 모든 강의검색 로직을 통합했습니다.
 * @summary 강의 검색
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] 커서 id, 값이 존재하지 않으면 첫 페이지
 * @param {'Major' | 'General Studies' | 'Academic Foundations'} [category] 강의 카테고리 (모든 강의, 전공, 교양, 학문의 기초), 모든 강의는 값을 넘겨주지 않음
 * @param {string} [keyword] 검색 키워드 (강의명, 교수명, 학수번호)
 * @param {string} [classification] category가 Major일때 특정 과를, category가 Academic Foundation일 때 특정 단과대를 넣어주세요.
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const courseGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CourseGetRequestParams): AxiosPromise<PaginatedCoursesDto> => {
    return courseGetFp(
      params.year,
      params.semester,
      params.cursorId,
      params.category,
      params.keyword,
      params.classification,
      params.options,
      configuration,
    ).then(request => request(axios, basePath))
  }
}

export type CourseRecommendationGetRequestParams = {
  limit: number
  options?: any
}

/**
 * 추천 강의를 조회합니다.
 * @summary 추천 강의 조회
 * @param {number} limit 반환 개수
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const courseRecommendationGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CourseRecommendationGetRequestParams): AxiosPromise<Array<CommonCourseResponseDto>> => {
    return courseRecommendationGetFp(params.limit, params.options, configuration).then(request =>
      request(axios, basePath),
    )
  }
}
