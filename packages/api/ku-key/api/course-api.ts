/* tslint:disable */
/* eslint-disable */
/**
 * KU-KEY API
 * API for KU-KEY service
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'

// @ts-ignore
import { CommonCourseResponseDto } from '../models'
// @ts-ignore
import { PaginatedCoursesDto } from '../models'
/**
 * CourseApi - axios parameter creator
 * @export
 */
/**
 * 해당 단과대의 모든 학문의 기초 강의를 조회합니다.
 * @summary 학문의 기초 강의 조회
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {string} college 단과 대학
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseAcademicFoundationGetAxiosParamCreator = async (
  year: string,
  semester: string,
  college: string,
  cursorId?: number,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/course/academic-foundation`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (cursorId !== undefined) {
    localVarQueryParameter['cursorId'] = cursorId
  }

  if (year !== undefined) {
    localVarQueryParameter['year'] = year
  }

  if (semester !== undefined) {
    localVarQueryParameter['semester'] = semester
  }

  if (college !== undefined) {
    localVarQueryParameter['college'] = college
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 특정 강의를 조회합니다.
 * @summary 특정 강의 조회
 * @param {number} courseId 특정 강의 ID
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseCourseIdGetAxiosParamCreator = async (
  courseId: number,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/course/{courseId}`.replace(`{${'courseId'}}`, encodeURIComponent(String(courseId)))
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 모든 교양 강의를 조회합니다.
 * @summary 교양 강의 조회
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseGeneralGetAxiosParamCreator = async (
  year: string,
  semester: string,
  cursorId?: number,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/course/general`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (cursorId !== undefined) {
    localVarQueryParameter['cursorId'] = cursorId
  }

  if (year !== undefined) {
    localVarQueryParameter['year'] = year
  }

  if (semester !== undefined) {
    localVarQueryParameter['semester'] = semester
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 해당 과의 모든 전공 강의를 조회합니다.
 * @summary 전공 강의 조회
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {string} major 전공 (과)
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseMajorGetAxiosParamCreator = async (
  year: string,
  semester: string,
  major: string,
  cursorId?: number,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/course/major`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (cursorId !== undefined) {
    localVarQueryParameter['cursorId'] = cursorId
  }

  if (year !== undefined) {
    localVarQueryParameter['year'] = year
  }

  if (semester !== undefined) {
    localVarQueryParameter['semester'] = semester
  }

  if (major !== undefined) {
    localVarQueryParameter['major'] = major
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * keyword를 입력하여 단과대 별 학문의 기초 강의에서 검색합니다.
 * @summary keyword로 학문의 기초 강의 검색
 * @param {string} college
 * @param {string} keyword 검색 키워드 (강의명, 교수명, 학수번호)
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseSearchAcademicFoundationGetAxiosParamCreator = async (
  college: string,
  keyword: string,
  year: string,
  semester: string,
  cursorId?: number,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/course/search-academic-foundation`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (college !== undefined) {
    localVarQueryParameter['college'] = college
  }

  if (keyword !== undefined) {
    localVarQueryParameter['keyword'] = keyword
  }

  if (cursorId !== undefined) {
    localVarQueryParameter['cursorId'] = cursorId
  }

  if (year !== undefined) {
    localVarQueryParameter['year'] = year
  }

  if (semester !== undefined) {
    localVarQueryParameter['semester'] = semester
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * keyword를 입력하여 전체 강의에서 검색합니다.
 * @summary keyword로 전체 강의 검색
 * @param {string} keyword 검색 키워드 (강의명, 교수명, 학수번호)
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseSearchAllGetAxiosParamCreator = async (
  keyword: string,
  year: string,
  semester: string,
  cursorId?: number,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/course/search-all`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (keyword !== undefined) {
    localVarQueryParameter['keyword'] = keyword
  }

  if (cursorId !== undefined) {
    localVarQueryParameter['cursorId'] = cursorId
  }

  if (year !== undefined) {
    localVarQueryParameter['year'] = year
  }

  if (semester !== undefined) {
    localVarQueryParameter['semester'] = semester
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 학수번호를 입력하여 강의를 검색합니다.
 * @summary 학수번호로 강의 검색
 * @param {string} courseCode 학수 번호
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseSearchCourseCodeGetAxiosParamCreator = async (
  courseCode: string,
  year: string,
  semester: string,
  cursorId?: number,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/course/search-course-code`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (courseCode !== undefined) {
    localVarQueryParameter['courseCode'] = courseCode
  }

  if (cursorId !== undefined) {
    localVarQueryParameter['cursorId'] = cursorId
  }

  if (year !== undefined) {
    localVarQueryParameter['year'] = year
  }

  if (semester !== undefined) {
    localVarQueryParameter['semester'] = semester
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 교양 과목명을 입력하여 강의를 검색합니다.
 * @summary 교양 과목명 강의 검색
 * @param {string} courseName 강의명
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseSearchGeneralCourseNameGetAxiosParamCreator = async (
  courseName: string,
  year: string,
  semester: string,
  cursorId?: number,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/course/search-general-course-name`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (courseName !== undefined) {
    localVarQueryParameter['courseName'] = courseName
  }

  if (cursorId !== undefined) {
    localVarQueryParameter['cursorId'] = cursorId
  }

  if (year !== undefined) {
    localVarQueryParameter['year'] = year
  }

  if (semester !== undefined) {
    localVarQueryParameter['semester'] = semester
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * keyword를 입력하여 교양 강의에서 검색합니다.
 * @summary keyword로 교양 강의 검색
 * @param {string} keyword 검색 키워드 (강의명, 교수명, 학수번호)
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseSearchGeneralGetAxiosParamCreator = async (
  keyword: string,
  year: string,
  semester: string,
  cursorId?: number,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/course/search-general`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (keyword !== undefined) {
    localVarQueryParameter['keyword'] = keyword
  }

  if (cursorId !== undefined) {
    localVarQueryParameter['cursorId'] = cursorId
  }

  if (year !== undefined) {
    localVarQueryParameter['year'] = year
  }

  if (semester !== undefined) {
    localVarQueryParameter['semester'] = semester
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 교양 담당 교수님 성함을 입력하여 강의를 검색합니다.
 * @summary 교양 담당 교수님 성함으로 강의 검색
 * @param {string} professorName 교수님 성함
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseSearchGeneralProfessorNameGetAxiosParamCreator = async (
  professorName: string,
  year: string,
  semester: string,
  cursorId?: number,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/course/search-general-professor-name`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (professorName !== undefined) {
    localVarQueryParameter['professorName'] = professorName
  }

  if (cursorId !== undefined) {
    localVarQueryParameter['cursorId'] = cursorId
  }

  if (year !== undefined) {
    localVarQueryParameter['year'] = year
  }

  if (semester !== undefined) {
    localVarQueryParameter['semester'] = semester
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 전공 과목명을 입력하여 강의를 검색합니다.
 * @summary 전공 과목명 강의 검색
 * @param {string} major
 * @param {string} courseName 강의명
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseSearchMajorCourseNameGetAxiosParamCreator = async (
  major: string,
  courseName: string,
  year: string,
  semester: string,
  cursorId?: number,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/course/search-major-course-name`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (major !== undefined) {
    localVarQueryParameter['major'] = major
  }

  if (courseName !== undefined) {
    localVarQueryParameter['courseName'] = courseName
  }

  if (cursorId !== undefined) {
    localVarQueryParameter['cursorId'] = cursorId
  }

  if (year !== undefined) {
    localVarQueryParameter['year'] = year
  }

  if (semester !== undefined) {
    localVarQueryParameter['semester'] = semester
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * keyword를 입력하여 전공 강의에서 검색합니다.
 * @summary keyword로 전공 강의 검색
 * @param {string} major
 * @param {string} keyword 검색 키워드 (강의명, 교수명, 학수번호)
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseSearchMajorGetAxiosParamCreator = async (
  major: string,
  keyword: string,
  year: string,
  semester: string,
  cursorId?: number,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/course/search-major`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (major !== undefined) {
    localVarQueryParameter['major'] = major
  }

  if (keyword !== undefined) {
    localVarQueryParameter['keyword'] = keyword
  }

  if (cursorId !== undefined) {
    localVarQueryParameter['cursorId'] = cursorId
  }

  if (year !== undefined) {
    localVarQueryParameter['year'] = year
  }

  if (semester !== undefined) {
    localVarQueryParameter['semester'] = semester
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 전공 과목 담당 교수님 성함을 입력하여 강의를 검색합니다.
 * @summary 전공 과목 담당 교수님 성함으로 강의 검색
 * @param {string} major
 * @param {string} professorName 교수님 성함
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseSearchMajorProfessorNameGetAxiosParamCreator = async (
  major: string,
  professorName: string,
  year: string,
  semester: string,
  cursorId?: number,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/course/search-major-professor-name`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (major !== undefined) {
    localVarQueryParameter['major'] = major
  }

  if (professorName !== undefined) {
    localVarQueryParameter['professorName'] = professorName
  }

  if (cursorId !== undefined) {
    localVarQueryParameter['cursorId'] = cursorId
  }

  if (year !== undefined) {
    localVarQueryParameter['year'] = year
  }

  if (semester !== undefined) {
    localVarQueryParameter['semester'] = semester
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}

/**
 * CourseApi - functional programming interface
 * @export
 */
/**
 * 해당 단과대의 모든 학문의 기초 강의를 조회합니다.
 * @summary 학문의 기초 강의 조회
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {string} college 단과 대학
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseAcademicFoundationGetFp = async (
  year: string,
  semester: string,
  college: string,
  cursorId?: number,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCoursesDto>> => {
  const localVarAxiosArgs = await courseAcademicFoundationGetAxiosParamCreator(
    year,
    semester,
    college,
    cursorId,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 특정 강의를 조회합니다.
 * @summary 특정 강의 조회
 * @param {number} courseId 특정 강의 ID
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseCourseIdGetFp = async (
  courseId: number,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonCourseResponseDto>> => {
  const localVarAxiosArgs = await courseCourseIdGetAxiosParamCreator(courseId, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 모든 교양 강의를 조회합니다.
 * @summary 교양 강의 조회
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseGeneralGetFp = async (
  year: string,
  semester: string,
  cursorId?: number,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCoursesDto>> => {
  const localVarAxiosArgs = await courseGeneralGetAxiosParamCreator(year, semester, cursorId, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 해당 과의 모든 전공 강의를 조회합니다.
 * @summary 전공 강의 조회
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {string} major 전공 (과)
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseMajorGetFp = async (
  year: string,
  semester: string,
  major: string,
  cursorId?: number,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCoursesDto>> => {
  const localVarAxiosArgs = await courseMajorGetAxiosParamCreator(
    year,
    semester,
    major,
    cursorId,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * keyword를 입력하여 단과대 별 학문의 기초 강의에서 검색합니다.
 * @summary keyword로 학문의 기초 강의 검색
 * @param {string} college
 * @param {string} keyword 검색 키워드 (강의명, 교수명, 학수번호)
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseSearchAcademicFoundationGetFp = async (
  college: string,
  keyword: string,
  year: string,
  semester: string,
  cursorId?: number,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCoursesDto>> => {
  const localVarAxiosArgs = await courseSearchAcademicFoundationGetAxiosParamCreator(
    college,
    keyword,
    year,
    semester,
    cursorId,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * keyword를 입력하여 전체 강의에서 검색합니다.
 * @summary keyword로 전체 강의 검색
 * @param {string} keyword 검색 키워드 (강의명, 교수명, 학수번호)
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseSearchAllGetFp = async (
  keyword: string,
  year: string,
  semester: string,
  cursorId?: number,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCoursesDto>> => {
  const localVarAxiosArgs = await courseSearchAllGetAxiosParamCreator(
    keyword,
    year,
    semester,
    cursorId,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 학수번호를 입력하여 강의를 검색합니다.
 * @summary 학수번호로 강의 검색
 * @param {string} courseCode 학수 번호
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseSearchCourseCodeGetFp = async (
  courseCode: string,
  year: string,
  semester: string,
  cursorId?: number,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCoursesDto>> => {
  const localVarAxiosArgs = await courseSearchCourseCodeGetAxiosParamCreator(
    courseCode,
    year,
    semester,
    cursorId,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 교양 과목명을 입력하여 강의를 검색합니다.
 * @summary 교양 과목명 강의 검색
 * @param {string} courseName 강의명
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseSearchGeneralCourseNameGetFp = async (
  courseName: string,
  year: string,
  semester: string,
  cursorId?: number,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCoursesDto>> => {
  const localVarAxiosArgs = await courseSearchGeneralCourseNameGetAxiosParamCreator(
    courseName,
    year,
    semester,
    cursorId,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * keyword를 입력하여 교양 강의에서 검색합니다.
 * @summary keyword로 교양 강의 검색
 * @param {string} keyword 검색 키워드 (강의명, 교수명, 학수번호)
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseSearchGeneralGetFp = async (
  keyword: string,
  year: string,
  semester: string,
  cursorId?: number,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCoursesDto>> => {
  const localVarAxiosArgs = await courseSearchGeneralGetAxiosParamCreator(
    keyword,
    year,
    semester,
    cursorId,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 교양 담당 교수님 성함을 입력하여 강의를 검색합니다.
 * @summary 교양 담당 교수님 성함으로 강의 검색
 * @param {string} professorName 교수님 성함
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseSearchGeneralProfessorNameGetFp = async (
  professorName: string,
  year: string,
  semester: string,
  cursorId?: number,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCoursesDto>> => {
  const localVarAxiosArgs = await courseSearchGeneralProfessorNameGetAxiosParamCreator(
    professorName,
    year,
    semester,
    cursorId,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 전공 과목명을 입력하여 강의를 검색합니다.
 * @summary 전공 과목명 강의 검색
 * @param {string} major
 * @param {string} courseName 강의명
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseSearchMajorCourseNameGetFp = async (
  major: string,
  courseName: string,
  year: string,
  semester: string,
  cursorId?: number,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCoursesDto>> => {
  const localVarAxiosArgs = await courseSearchMajorCourseNameGetAxiosParamCreator(
    major,
    courseName,
    year,
    semester,
    cursorId,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * keyword를 입력하여 전공 강의에서 검색합니다.
 * @summary keyword로 전공 강의 검색
 * @param {string} major
 * @param {string} keyword 검색 키워드 (강의명, 교수명, 학수번호)
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseSearchMajorGetFp = async (
  major: string,
  keyword: string,
  year: string,
  semester: string,
  cursorId?: number,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCoursesDto>> => {
  const localVarAxiosArgs = await courseSearchMajorGetAxiosParamCreator(
    major,
    keyword,
    year,
    semester,
    cursorId,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 전공 과목 담당 교수님 성함을 입력하여 강의를 검색합니다.
 * @summary 전공 과목 담당 교수님 성함으로 강의 검색
 * @param {string} major
 * @param {string} professorName 교수님 성함
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseSearchMajorProfessorNameGetFp = async (
  major: string,
  professorName: string,
  year: string,
  semester: string,
  cursorId?: number,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCoursesDto>> => {
  const localVarAxiosArgs = await courseSearchMajorProfessorNameGetAxiosParamCreator(
    major,
    professorName,
    year,
    semester,
    cursorId,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}

/**
 * CourseApi - factory interface
 * @export
 */

export type CourseAcademicFoundationGetRequestParams = {
  year: string
  semester: string
  college: string
  cursorId?: number
  options?: any
}

/**
 * 해당 단과대의 모든 학문의 기초 강의를 조회합니다.
 * @summary 학문의 기초 강의 조회
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {string} college 단과 대학
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const courseAcademicFoundationGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CourseAcademicFoundationGetRequestParams): AxiosPromise<PaginatedCoursesDto> => {
    return courseAcademicFoundationGetFp(
      params.year,
      params.semester,
      params.college,
      params.cursorId,
      params.options,
      configuration,
    ).then(request => request(axios, basePath))
  }
}

export type CourseCourseIdGetRequestParams = {
  courseId: number
  options?: any
}

/**
 * 특정 강의를 조회합니다.
 * @summary 특정 강의 조회
 * @param {number} courseId 특정 강의 ID
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const courseCourseIdGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CourseCourseIdGetRequestParams): AxiosPromise<CommonCourseResponseDto> => {
    return courseCourseIdGetFp(params.courseId, params.options, configuration).then(request => request(axios, basePath))
  }
}

export type CourseGeneralGetRequestParams = {
  year: string
  semester: string
  cursorId?: number
  options?: any
}

/**
 * 모든 교양 강의를 조회합니다.
 * @summary 교양 강의 조회
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const courseGeneralGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CourseGeneralGetRequestParams): AxiosPromise<PaginatedCoursesDto> => {
    return courseGeneralGetFp(params.year, params.semester, params.cursorId, params.options, configuration).then(
      request => request(axios, basePath),
    )
  }
}

export type CourseMajorGetRequestParams = {
  year: string
  semester: string
  major: string
  cursorId?: number
  options?: any
}

/**
 * 해당 과의 모든 전공 강의를 조회합니다.
 * @summary 전공 강의 조회
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {string} major 전공 (과)
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const courseMajorGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CourseMajorGetRequestParams): AxiosPromise<PaginatedCoursesDto> => {
    return courseMajorGetFp(
      params.year,
      params.semester,
      params.major,
      params.cursorId,
      params.options,
      configuration,
    ).then(request => request(axios, basePath))
  }
}

export type CourseSearchAcademicFoundationGetRequestParams = {
  college: string
  keyword: string
  year: string
  semester: string
  cursorId?: number
  options?: any
}

/**
 * keyword를 입력하여 단과대 별 학문의 기초 강의에서 검색합니다.
 * @summary keyword로 학문의 기초 강의 검색
 * @param {string} college
 * @param {string} keyword 검색 키워드 (강의명, 교수명, 학수번호)
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const courseSearchAcademicFoundationGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CourseSearchAcademicFoundationGetRequestParams): AxiosPromise<PaginatedCoursesDto> => {
    return courseSearchAcademicFoundationGetFp(
      params.college,
      params.keyword,
      params.year,
      params.semester,
      params.cursorId,
      params.options,
      configuration,
    ).then(request => request(axios, basePath))
  }
}

export type CourseSearchAllGetRequestParams = {
  keyword: string
  year: string
  semester: string
  cursorId?: number
  options?: any
}

/**
 * keyword를 입력하여 전체 강의에서 검색합니다.
 * @summary keyword로 전체 강의 검색
 * @param {string} keyword 검색 키워드 (강의명, 교수명, 학수번호)
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const courseSearchAllGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CourseSearchAllGetRequestParams): AxiosPromise<PaginatedCoursesDto> => {
    return courseSearchAllGetFp(
      params.keyword,
      params.year,
      params.semester,
      params.cursorId,
      params.options,
      configuration,
    ).then(request => request(axios, basePath))
  }
}

export type CourseSearchCourseCodeGetRequestParams = {
  courseCode: string
  year: string
  semester: string
  cursorId?: number
  options?: any
}

/**
 * 학수번호를 입력하여 강의를 검색합니다.
 * @summary 학수번호로 강의 검색
 * @param {string} courseCode 학수 번호
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const courseSearchCourseCodeGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CourseSearchCourseCodeGetRequestParams): AxiosPromise<PaginatedCoursesDto> => {
    return courseSearchCourseCodeGetFp(
      params.courseCode,
      params.year,
      params.semester,
      params.cursorId,
      params.options,
      configuration,
    ).then(request => request(axios, basePath))
  }
}

export type CourseSearchGeneralCourseNameGetRequestParams = {
  courseName: string
  year: string
  semester: string
  cursorId?: number
  options?: any
}

/**
 * 교양 과목명을 입력하여 강의를 검색합니다.
 * @summary 교양 과목명 강의 검색
 * @param {string} courseName 강의명
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const courseSearchGeneralCourseNameGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CourseSearchGeneralCourseNameGetRequestParams): AxiosPromise<PaginatedCoursesDto> => {
    return courseSearchGeneralCourseNameGetFp(
      params.courseName,
      params.year,
      params.semester,
      params.cursorId,
      params.options,
      configuration,
    ).then(request => request(axios, basePath))
  }
}

export type CourseSearchGeneralGetRequestParams = {
  keyword: string
  year: string
  semester: string
  cursorId?: number
  options?: any
}

/**
 * keyword를 입력하여 교양 강의에서 검색합니다.
 * @summary keyword로 교양 강의 검색
 * @param {string} keyword 검색 키워드 (강의명, 교수명, 학수번호)
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const courseSearchGeneralGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CourseSearchGeneralGetRequestParams): AxiosPromise<PaginatedCoursesDto> => {
    return courseSearchGeneralGetFp(
      params.keyword,
      params.year,
      params.semester,
      params.cursorId,
      params.options,
      configuration,
    ).then(request => request(axios, basePath))
  }
}

export type CourseSearchGeneralProfessorNameGetRequestParams = {
  professorName: string
  year: string
  semester: string
  cursorId?: number
  options?: any
}

/**
 * 교양 담당 교수님 성함을 입력하여 강의를 검색합니다.
 * @summary 교양 담당 교수님 성함으로 강의 검색
 * @param {string} professorName 교수님 성함
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const courseSearchGeneralProfessorNameGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CourseSearchGeneralProfessorNameGetRequestParams): AxiosPromise<PaginatedCoursesDto> => {
    return courseSearchGeneralProfessorNameGetFp(
      params.professorName,
      params.year,
      params.semester,
      params.cursorId,
      params.options,
      configuration,
    ).then(request => request(axios, basePath))
  }
}

export type CourseSearchMajorCourseNameGetRequestParams = {
  major: string
  courseName: string
  year: string
  semester: string
  cursorId?: number
  options?: any
}

/**
 * 전공 과목명을 입력하여 강의를 검색합니다.
 * @summary 전공 과목명 강의 검색
 * @param {string} major
 * @param {string} courseName 강의명
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const courseSearchMajorCourseNameGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CourseSearchMajorCourseNameGetRequestParams): AxiosPromise<PaginatedCoursesDto> => {
    return courseSearchMajorCourseNameGetFp(
      params.major,
      params.courseName,
      params.year,
      params.semester,
      params.cursorId,
      params.options,
      configuration,
    ).then(request => request(axios, basePath))
  }
}

export type CourseSearchMajorGetRequestParams = {
  major: string
  keyword: string
  year: string
  semester: string
  cursorId?: number
  options?: any
}

/**
 * keyword를 입력하여 전공 강의에서 검색합니다.
 * @summary keyword로 전공 강의 검색
 * @param {string} major
 * @param {string} keyword 검색 키워드 (강의명, 교수명, 학수번호)
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const courseSearchMajorGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CourseSearchMajorGetRequestParams): AxiosPromise<PaginatedCoursesDto> => {
    return courseSearchMajorGetFp(
      params.major,
      params.keyword,
      params.year,
      params.semester,
      params.cursorId,
      params.options,
      configuration,
    ).then(request => request(axios, basePath))
  }
}

export type CourseSearchMajorProfessorNameGetRequestParams = {
  major: string
  professorName: string
  year: string
  semester: string
  cursorId?: number
  options?: any
}

/**
 * 전공 과목 담당 교수님 성함을 입력하여 강의를 검색합니다.
 * @summary 전공 과목 담당 교수님 성함으로 강의 검색
 * @param {string} major
 * @param {string} professorName 교수님 성함
 * @param {string} year 연도
 * @param {string} semester 학기
 * @param {number} [cursorId] cursor id, 값이 존재하지 않으면 첫 페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const courseSearchMajorProfessorNameGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CourseSearchMajorProfessorNameGetRequestParams): AxiosPromise<PaginatedCoursesDto> => {
    return courseSearchMajorProfessorNameGetFp(
      params.major,
      params.professorName,
      params.year,
      params.semester,
      params.cursorId,
      params.options,
      configuration,
    ).then(request => request(axios, basePath))
  }
}
