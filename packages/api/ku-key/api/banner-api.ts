/* tslint:disable */
/* eslint-disable */
/**
 * KU-KEY API
 * API for KU-KEY service
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, toPathString, createRequestFunction } from '../common'
// @ts-ignore
import { COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'

// @ts-ignore
import { BannerDto } from '../models'
/**
 * BannerApi - axios parameter creator
 * @export
 */
/**
 * 배너 이미지 목록을 조회합니다.(최신순)
 * @summary 배너 이미지 목록 조회
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const bannerGetAxiosParamCreator = async (
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/banner`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 배너 이미지를 삭제합니다.
 * @summary 배너 이미지 삭제
 * @param {number} id 배너 이미지 id
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const bannerIdDeleteAxiosParamCreator = async (
  id: number,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/banner/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 배너 이미지를 생성합니다.
 * @summary 배너 이미지 생성
 * @param {any} image 배너 이미지 파일
 * @param {string} title 배너 제목
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const bannerPostAxiosParamCreator = async (
  image: any,
  title: string,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/banner`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)()

  if (image !== undefined) {
    localVarFormParams.append('image', image as any)
  }

  if (title !== undefined) {
    localVarFormParams.append('title', title as any)
  }

  localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
  localVarRequestOptions.data = localVarFormParams

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}

/**
 * BannerApi - functional programming interface
 * @export
 */
/**
 * 배너 이미지 목록을 조회합니다.(최신순)
 * @summary 배너 이미지 목록 조회
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const bannerGetFp = async (
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BannerDto>>> => {
  const localVarAxiosArgs = await bannerGetAxiosParamCreator(options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 배너 이미지를 삭제합니다.
 * @summary 배너 이미지 삭제
 * @param {number} id 배너 이미지 id
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const bannerIdDeleteFp = async (
  id: number,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> => {
  const localVarAxiosArgs = await bannerIdDeleteAxiosParamCreator(id, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 배너 이미지를 생성합니다.
 * @summary 배너 이미지 생성
 * @param {any} image 배너 이미지 파일
 * @param {string} title 배너 제목
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const bannerPostFp = async (
  image: any,
  title: string,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BannerDto>> => {
  const localVarAxiosArgs = await bannerPostAxiosParamCreator(image, title, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}

/**
 * BannerApi - factory interface
 * @export
 */

export type BannerGetRequestParams = {
  options?: any
}

/**
 * 배너 이미지 목록을 조회합니다.(최신순)
 * @summary 배너 이미지 목록 조회
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const bannerGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params?: { options?: any }): AxiosPromise<Array<BannerDto>> => {
    return bannerGetFp(params?.options, configuration).then(request => request(axios, basePath))
  }
}

export type BannerIdDeleteRequestParams = {
  id: number
  options?: any
}

/**
 * 배너 이미지를 삭제합니다.
 * @summary 배너 이미지 삭제
 * @param {number} id 배너 이미지 id
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const bannerIdDelete = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: BannerIdDeleteRequestParams): AxiosPromise<void> => {
    return bannerIdDeleteFp(params.id, params.options, configuration).then(request => request(axios, basePath))
  }
}

export type BannerPostRequestParams = {
  image: any
  title: string
  options?: any
}

/**
 * 배너 이미지를 생성합니다.
 * @summary 배너 이미지 생성
 * @param {any} image 배너 이미지 파일
 * @param {string} title 배너 제목
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const bannerPost = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: BannerPostRequestParams): AxiosPromise<BannerDto> => {
    return bannerPostFp(params.image, params.title, params.options, configuration).then(request =>
      request(axios, basePath),
    )
  }
}
