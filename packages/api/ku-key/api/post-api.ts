/* tslint:disable */
/* eslint-disable */
/**
 * KU-KEY API
 * API for KU-KEY service
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'

// @ts-ignore
import { CreateReportRequestDto } from '../models'
// @ts-ignore
import { CreateReportResponseDto } from '../models'
// @ts-ignore
import { DeletePostResponseDto } from '../models'
// @ts-ignore
import { GetPostListResponseDto } from '../models'
// @ts-ignore
import { GetPostListWithBoardResponseDto } from '../models'
// @ts-ignore
import { GetPostResponseDto } from '../models'
// @ts-ignore
import { ReactPostRequestDto } from '../models'
// @ts-ignore
import { ReactPostResponseDto } from '../models'
// @ts-ignore
import { ScrapPostResponseDto } from '../models'
/**
 * PostApi - axios parameter creator
 * @export
 */
/**
 * 전체 게시글 목록을 조회합니다.
 * @summary 전체 게시글 목록 조회
 * @param {number} [take] 한 페이지에 담을 데이터 수, default &#x3D; 10
 * @param {string} [cursor] 커서 값, 14자리 숫자로 이루어진 문자열, 없으면 첫페이지
 * @param {string} [keyword] 검색어, 없으면 전체 조회
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postAllGetAxiosParamCreator = async (
  take?: number,
  cursor?: string,
  keyword?: string,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/post/all`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (take !== undefined) {
    localVarQueryParameter['take'] = take
  }

  if (cursor !== undefined) {
    localVarQueryParameter['cursor'] = cursor
  }

  if (keyword !== undefined) {
    localVarQueryParameter['keyword'] = keyword
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 게시판 별로 게시글 목록을 조회합니다.
 * @summary 게시판 별 게시글 목록 조회
 * @param {number} boardId 게시판 고유 Id, 1: 자유게시판, 2: 질문게시판, 3: 정보게시판
 * @param {number} [take] 한 페이지에 담을 데이터 수, default &#x3D; 10
 * @param {string} [cursor] 커서 값, 14자리 숫자로 이루어진 문자열, 없으면 첫페이지
 * @param {string} [keyword] 검색어, 없으면 전체 조회
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postGetAxiosParamCreator = async (
  boardId: number,
  take?: number,
  cursor?: string,
  keyword?: string,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/post`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (take !== undefined) {
    localVarQueryParameter['take'] = take
  }

  if (cursor !== undefined) {
    localVarQueryParameter['cursor'] = cursor
  }

  if (boardId !== undefined) {
    localVarQueryParameter['boardId'] = boardId
  }

  if (keyword !== undefined) {
    localVarQueryParameter['keyword'] = keyword
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * hot 게시글 목록을 조회합니다.
 * @summary hot 게시글 목록 조회
 * @param {number} [take] 한 페이지에 담을 데이터 수, default &#x3D; 10
 * @param {string} [cursor] 커서 값, 14자리 숫자로 이루어진 문자열, 없으면 첫페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postHotGetAxiosParamCreator = async (
  take?: number,
  cursor?: string,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/post/hot`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (take !== undefined) {
    localVarQueryParameter['take'] = take
  }

  if (cursor !== undefined) {
    localVarQueryParameter['cursor'] = cursor
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 내가 쓴 글 목록을 조회합니다.
 * @summary 내가 쓴 글 목록 조회
 * @param {number} [take] 한 페이지에 담을 데이터 수, default &#x3D; 10
 * @param {string} [cursor] 커서 값, 14자리 숫자로 이루어진 문자열, 없으면 첫페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postMyGetAxiosParamCreator = async (
  take?: number,
  cursor?: string,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/post/my`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (take !== undefined) {
    localVarQueryParameter['take'] = take
  }

  if (cursor !== undefined) {
    localVarQueryParameter['cursor'] = cursor
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 게시글을 생성합니다.
 * @summary 게시글 생성
 * @param {number} boardId 게시글을 생성하고자 하는 게시판 ID
 * @param {string} title 게시글 제목
 * @param {string} content 게시글 내용
 * @param {boolean} isAnonymous 익명 여부
 * @param {Array<any>} [images] 첨부 이미지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postPostAxiosParamCreator = async (
  boardId: number,
  title: string,
  content: string,
  isAnonymous: boolean,
  images?: Array<any>,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/post`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)()
  if (boardId !== undefined) {
    localVarQueryParameter['boardId'] = boardId
  }

  if (title !== undefined) {
    localVarFormParams.append('title', title as any)
  }

  if (content !== undefined) {
    localVarFormParams.append('content', content as any)
  }

  if (isAnonymous !== undefined) {
    localVarFormParams.append('isAnonymous', isAnonymous as any)
  }
  if (images) {
    images.forEach(element => {
      localVarFormParams.append('images', element as any)
    })
  }

  localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
  localVarRequestOptions.data = localVarFormParams

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 게시글을 삭제합니다.
 * @summary 게시글 삭제
 * @param {number} postId 게시글의 고유 ID
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postPostIdDeleteAxiosParamCreator = async (
  postId: number,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/post/{postId}`.replace(`{${'postId'}}`, encodeURIComponent(String(postId)))
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 게시글 내용을 조회합니다.
 * @summary 게시글 조회
 * @param {number} postId 게시글의 고유 ID
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postPostIdGetAxiosParamCreator = async (
  postId: number,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/post/{postId}`.replace(`{${'postId'}}`, encodeURIComponent(String(postId)))
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 게시글을 수정합니다.
 * @summary 게시글 수정
 * @param {number} postId 게시글의 고유 ID
 * @param {string} title 게시글 제목
 * @param {string} content 게시글 내용
 * @param {boolean} isAnonymous 익명 여부
 * @param {boolean} imageUpdate 첨부 이미지 변경 여부
 * @param {Array<any>} [images] 첨부 이미지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postPostIdPatchAxiosParamCreator = async (
  postId: number,
  title: string,
  content: string,
  isAnonymous: boolean,
  imageUpdate: boolean,
  images?: Array<any>,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/post/{postId}`.replace(`{${'postId'}}`, encodeURIComponent(String(postId)))
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)()

  if (title !== undefined) {
    localVarFormParams.append('title', title as any)
  }

  if (content !== undefined) {
    localVarFormParams.append('content', content as any)
  }

  if (isAnonymous !== undefined) {
    localVarFormParams.append('isAnonymous', isAnonymous as any)
  }
  if (images) {
    images.forEach(element => {
      localVarFormParams.append('images', element as any)
    })
  }

  if (imageUpdate !== undefined) {
    localVarFormParams.append('imageUpdate', imageUpdate as any)
  }

  localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
  localVarRequestOptions.data = localVarFormParams

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 게시글에 반응을 남깁니다. 만일 이미 반응을 남긴 게시글이라면 반응을 변경합니다.
 * @summary 게시글 반응
 * @param {number} postId 게시글의 고유 ID
 * @param {ReactPostRequestDto} reactPostRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postPostIdReactionPostAxiosParamCreator = async (
  postId: number,
  reactPostRequestDto: ReactPostRequestDto,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/post/{postId}/reaction`.replace(`{${'postId'}}`, encodeURIComponent(String(postId)))
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  localVarHeaderParameter['Content-Type'] = 'application/json'

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
  localVarRequestOptions.data = reactPostRequestDto || undefined

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 게시글을 신고합니다
 * @summary 게시글 신고
 * @param {number} postId 게시글의 고유 ID
 * @param {CreateReportRequestDto} createReportRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postPostIdReportPostAxiosParamCreator = async (
  postId: number,
  createReportRequestDto: CreateReportRequestDto,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/post/{postId}/report`.replace(`{${'postId'}}`, encodeURIComponent(String(postId)))
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  localVarHeaderParameter['Content-Type'] = 'application/json'

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
  localVarRequestOptions.data = createReportRequestDto || undefined

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 게시글을 스크랩합니다. 만일 이미 스크랩한 게시글이라면 스크랩을 취소합니다.
 * @summary 게시글 스크랩
 * @param {number} postId 게시글의 고유 ID
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postPostIdScrapPostAxiosParamCreator = async (
  postId: number,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/post/{postId}/scrap`.replace(`{${'postId'}}`, encodeURIComponent(String(postId)))
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 반응을 남긴 글 목록을 조회합니다.
 * @summary 반응 남긴 글 목록 조회
 * @param {number} [take] 한 페이지에 담을 데이터 수, default &#x3D; 10
 * @param {string} [cursor] 커서 값, 14자리 숫자로 이루어진 문자열, 없으면 첫페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postReactGetAxiosParamCreator = async (
  take?: number,
  cursor?: string,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/post/react`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (take !== undefined) {
    localVarQueryParameter['take'] = take
  }

  if (cursor !== undefined) {
    localVarQueryParameter['cursor'] = cursor
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 스크랩한 글 목록을 조회합니다.
 * @summary 스크랩한 글 목록 조회
 * @param {number} [take] 한 페이지에 담을 데이터 수, default &#x3D; 10
 * @param {string} [cursor] 커서 값, 14자리 숫자로 이루어진 문자열, 없으면 첫페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postScrapGetAxiosParamCreator = async (
  take?: number,
  cursor?: string,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/post/scrap`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (take !== undefined) {
    localVarQueryParameter['take'] = take
  }

  if (cursor !== undefined) {
    localVarQueryParameter['cursor'] = cursor
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}

/**
 * PostApi - functional programming interface
 * @export
 */
/**
 * 전체 게시글 목록을 조회합니다.
 * @summary 전체 게시글 목록 조회
 * @param {number} [take] 한 페이지에 담을 데이터 수, default &#x3D; 10
 * @param {string} [cursor] 커서 값, 14자리 숫자로 이루어진 문자열, 없으면 첫페이지
 * @param {string} [keyword] 검색어, 없으면 전체 조회
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postAllGetFp = async (
  take?: number,
  cursor?: string,
  keyword?: string,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPostListResponseDto>> => {
  const localVarAxiosArgs = await postAllGetAxiosParamCreator(take, cursor, keyword, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 게시판 별로 게시글 목록을 조회합니다.
 * @summary 게시판 별 게시글 목록 조회
 * @param {number} boardId 게시판 고유 Id, 1: 자유게시판, 2: 질문게시판, 3: 정보게시판
 * @param {number} [take] 한 페이지에 담을 데이터 수, default &#x3D; 10
 * @param {string} [cursor] 커서 값, 14자리 숫자로 이루어진 문자열, 없으면 첫페이지
 * @param {string} [keyword] 검색어, 없으면 전체 조회
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postGetFp = async (
  boardId: number,
  take?: number,
  cursor?: string,
  keyword?: string,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPostListWithBoardResponseDto>> => {
  const localVarAxiosArgs = await postGetAxiosParamCreator(boardId, take, cursor, keyword, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * hot 게시글 목록을 조회합니다.
 * @summary hot 게시글 목록 조회
 * @param {number} [take] 한 페이지에 담을 데이터 수, default &#x3D; 10
 * @param {string} [cursor] 커서 값, 14자리 숫자로 이루어진 문자열, 없으면 첫페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postHotGetFp = async (
  take?: number,
  cursor?: string,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPostListResponseDto>> => {
  const localVarAxiosArgs = await postHotGetAxiosParamCreator(take, cursor, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 내가 쓴 글 목록을 조회합니다.
 * @summary 내가 쓴 글 목록 조회
 * @param {number} [take] 한 페이지에 담을 데이터 수, default &#x3D; 10
 * @param {string} [cursor] 커서 값, 14자리 숫자로 이루어진 문자열, 없으면 첫페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postMyGetFp = async (
  take?: number,
  cursor?: string,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPostListResponseDto>> => {
  const localVarAxiosArgs = await postMyGetAxiosParamCreator(take, cursor, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 게시글을 생성합니다.
 * @summary 게시글 생성
 * @param {number} boardId 게시글을 생성하고자 하는 게시판 ID
 * @param {string} title 게시글 제목
 * @param {string} content 게시글 내용
 * @param {boolean} isAnonymous 익명 여부
 * @param {Array<any>} [images] 첨부 이미지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postPostFp = async (
  boardId: number,
  title: string,
  content: string,
  isAnonymous: boolean,
  images?: Array<any>,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPostResponseDto>> => {
  const localVarAxiosArgs = await postPostAxiosParamCreator(
    boardId,
    title,
    content,
    isAnonymous,
    images,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 게시글을 삭제합니다.
 * @summary 게시글 삭제
 * @param {number} postId 게시글의 고유 ID
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postPostIdDeleteFp = async (
  postId: number,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeletePostResponseDto>> => {
  const localVarAxiosArgs = await postPostIdDeleteAxiosParamCreator(postId, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 게시글 내용을 조회합니다.
 * @summary 게시글 조회
 * @param {number} postId 게시글의 고유 ID
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postPostIdGetFp = async (
  postId: number,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPostResponseDto>> => {
  const localVarAxiosArgs = await postPostIdGetAxiosParamCreator(postId, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 게시글을 수정합니다.
 * @summary 게시글 수정
 * @param {number} postId 게시글의 고유 ID
 * @param {string} title 게시글 제목
 * @param {string} content 게시글 내용
 * @param {boolean} isAnonymous 익명 여부
 * @param {boolean} imageUpdate 첨부 이미지 변경 여부
 * @param {Array<any>} [images] 첨부 이미지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postPostIdPatchFp = async (
  postId: number,
  title: string,
  content: string,
  isAnonymous: boolean,
  imageUpdate: boolean,
  images?: Array<any>,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPostResponseDto>> => {
  const localVarAxiosArgs = await postPostIdPatchAxiosParamCreator(
    postId,
    title,
    content,
    isAnonymous,
    imageUpdate,
    images,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 게시글에 반응을 남깁니다. 만일 이미 반응을 남긴 게시글이라면 반응을 변경합니다.
 * @summary 게시글 반응
 * @param {number} postId 게시글의 고유 ID
 * @param {ReactPostRequestDto} reactPostRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postPostIdReactionPostFp = async (
  postId: number,
  reactPostRequestDto: ReactPostRequestDto,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReactPostResponseDto>> => {
  const localVarAxiosArgs = await postPostIdReactionPostAxiosParamCreator(
    postId,
    reactPostRequestDto,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 게시글을 신고합니다
 * @summary 게시글 신고
 * @param {number} postId 게시글의 고유 ID
 * @param {CreateReportRequestDto} createReportRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postPostIdReportPostFp = async (
  postId: number,
  createReportRequestDto: CreateReportRequestDto,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateReportResponseDto>> => {
  const localVarAxiosArgs = await postPostIdReportPostAxiosParamCreator(
    postId,
    createReportRequestDto,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 게시글을 스크랩합니다. 만일 이미 스크랩한 게시글이라면 스크랩을 취소합니다.
 * @summary 게시글 스크랩
 * @param {number} postId 게시글의 고유 ID
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postPostIdScrapPostFp = async (
  postId: number,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScrapPostResponseDto>> => {
  const localVarAxiosArgs = await postPostIdScrapPostAxiosParamCreator(postId, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 반응을 남긴 글 목록을 조회합니다.
 * @summary 반응 남긴 글 목록 조회
 * @param {number} [take] 한 페이지에 담을 데이터 수, default &#x3D; 10
 * @param {string} [cursor] 커서 값, 14자리 숫자로 이루어진 문자열, 없으면 첫페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postReactGetFp = async (
  take?: number,
  cursor?: string,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPostListResponseDto>> => {
  const localVarAxiosArgs = await postReactGetAxiosParamCreator(take, cursor, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 스크랩한 글 목록을 조회합니다.
 * @summary 스크랩한 글 목록 조회
 * @param {number} [take] 한 페이지에 담을 데이터 수, default &#x3D; 10
 * @param {string} [cursor] 커서 값, 14자리 숫자로 이루어진 문자열, 없으면 첫페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const postScrapGetFp = async (
  take?: number,
  cursor?: string,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPostListResponseDto>> => {
  const localVarAxiosArgs = await postScrapGetAxiosParamCreator(take, cursor, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}

/**
 * PostApi - factory interface
 * @export
 */

export type PostAllGetRequestParams = {
  take?: number
  cursor?: string
  keyword?: string
  options?: any
}

/**
 * 전체 게시글 목록을 조회합니다.
 * @summary 전체 게시글 목록 조회
 * @param {number} [take] 한 페이지에 담을 데이터 수, default &#x3D; 10
 * @param {string} [cursor] 커서 값, 14자리 숫자로 이루어진 문자열, 없으면 첫페이지
 * @param {string} [keyword] 검색어, 없으면 전체 조회
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const postAllGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: PostAllGetRequestParams): AxiosPromise<GetPostListResponseDto> => {
    return postAllGetFp(params.take, params.cursor, params.keyword, params.options, configuration).then(request =>
      request(axios, basePath),
    )
  }
}

export type PostGetRequestParams = {
  boardId: number
  take?: number
  cursor?: string
  keyword?: string
  options?: any
}

/**
 * 게시판 별로 게시글 목록을 조회합니다.
 * @summary 게시판 별 게시글 목록 조회
 * @param {number} boardId 게시판 고유 Id, 1: 자유게시판, 2: 질문게시판, 3: 정보게시판
 * @param {number} [take] 한 페이지에 담을 데이터 수, default &#x3D; 10
 * @param {string} [cursor] 커서 값, 14자리 숫자로 이루어진 문자열, 없으면 첫페이지
 * @param {string} [keyword] 검색어, 없으면 전체 조회
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const postGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: PostGetRequestParams): AxiosPromise<GetPostListWithBoardResponseDto> => {
    return postGetFp(params.boardId, params.take, params.cursor, params.keyword, params.options, configuration).then(
      request => request(axios, basePath),
    )
  }
}

export type PostHotGetRequestParams = {
  take?: number
  cursor?: string
  options?: any
}

/**
 * hot 게시글 목록을 조회합니다.
 * @summary hot 게시글 목록 조회
 * @param {number} [take] 한 페이지에 담을 데이터 수, default &#x3D; 10
 * @param {string} [cursor] 커서 값, 14자리 숫자로 이루어진 문자열, 없으면 첫페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const postHotGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: PostHotGetRequestParams): AxiosPromise<GetPostListResponseDto> => {
    return postHotGetFp(params.take, params.cursor, params.options, configuration).then(request =>
      request(axios, basePath),
    )
  }
}

export type PostMyGetRequestParams = {
  take?: number
  cursor?: string
  options?: any
}

/**
 * 내가 쓴 글 목록을 조회합니다.
 * @summary 내가 쓴 글 목록 조회
 * @param {number} [take] 한 페이지에 담을 데이터 수, default &#x3D; 10
 * @param {string} [cursor] 커서 값, 14자리 숫자로 이루어진 문자열, 없으면 첫페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const postMyGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: PostMyGetRequestParams): AxiosPromise<GetPostListResponseDto> => {
    return postMyGetFp(params.take, params.cursor, params.options, configuration).then(request =>
      request(axios, basePath),
    )
  }
}

export type PostPostRequestParams = {
  boardId: number
  title: string
  content: string
  isAnonymous: boolean
  images?: Array<any>
  options?: any
}

/**
 * 게시글을 생성합니다.
 * @summary 게시글 생성
 * @param {number} boardId 게시글을 생성하고자 하는 게시판 ID
 * @param {string} title 게시글 제목
 * @param {string} content 게시글 내용
 * @param {boolean} isAnonymous 익명 여부
 * @param {Array<any>} [images] 첨부 이미지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const postPost = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: PostPostRequestParams): AxiosPromise<GetPostResponseDto> => {
    return postPostFp(
      params.boardId,
      params.title,
      params.content,
      params.isAnonymous,
      params.images,
      params.options,
      configuration,
    ).then(request => request(axios, basePath))
  }
}

export type PostPostIdDeleteRequestParams = {
  postId: number
  options?: any
}

/**
 * 게시글을 삭제합니다.
 * @summary 게시글 삭제
 * @param {number} postId 게시글의 고유 ID
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const postPostIdDelete = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: PostPostIdDeleteRequestParams): AxiosPromise<DeletePostResponseDto> => {
    return postPostIdDeleteFp(params.postId, params.options, configuration).then(request => request(axios, basePath))
  }
}

export type PostPostIdGetRequestParams = {
  postId: number
  options?: any
}

/**
 * 게시글 내용을 조회합니다.
 * @summary 게시글 조회
 * @param {number} postId 게시글의 고유 ID
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const postPostIdGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: PostPostIdGetRequestParams): AxiosPromise<GetPostResponseDto> => {
    return postPostIdGetFp(params.postId, params.options, configuration).then(request => request(axios, basePath))
  }
}

export type PostPostIdPatchRequestParams = {
  postId: number
  title: string
  content: string
  isAnonymous: boolean
  imageUpdate: boolean
  images?: Array<any>
  options?: any
}

/**
 * 게시글을 수정합니다.
 * @summary 게시글 수정
 * @param {number} postId 게시글의 고유 ID
 * @param {string} title 게시글 제목
 * @param {string} content 게시글 내용
 * @param {boolean} isAnonymous 익명 여부
 * @param {boolean} imageUpdate 첨부 이미지 변경 여부
 * @param {Array<any>} [images] 첨부 이미지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const postPostIdPatch = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: PostPostIdPatchRequestParams): AxiosPromise<GetPostResponseDto> => {
    return postPostIdPatchFp(
      params.postId,
      params.title,
      params.content,
      params.isAnonymous,
      params.imageUpdate,
      params.images,
      params.options,
      configuration,
    ).then(request => request(axios, basePath))
  }
}

export type PostPostIdReactionPostRequestParams = {
  postId: number
  reactPostRequestDto: ReactPostRequestDto
  options?: any
}

/**
 * 게시글에 반응을 남깁니다. 만일 이미 반응을 남긴 게시글이라면 반응을 변경합니다.
 * @summary 게시글 반응
 * @param {number} postId 게시글의 고유 ID
 * @param {ReactPostRequestDto} reactPostRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const postPostIdReactionPost = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: PostPostIdReactionPostRequestParams): AxiosPromise<ReactPostResponseDto> => {
    return postPostIdReactionPostFp(params.postId, params.reactPostRequestDto, params.options, configuration).then(
      request => request(axios, basePath),
    )
  }
}

export type PostPostIdReportPostRequestParams = {
  postId: number
  createReportRequestDto: CreateReportRequestDto
  options?: any
}

/**
 * 게시글을 신고합니다
 * @summary 게시글 신고
 * @param {number} postId 게시글의 고유 ID
 * @param {CreateReportRequestDto} createReportRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const postPostIdReportPost = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: PostPostIdReportPostRequestParams): AxiosPromise<CreateReportResponseDto> => {
    return postPostIdReportPostFp(params.postId, params.createReportRequestDto, params.options, configuration).then(
      request => request(axios, basePath),
    )
  }
}

export type PostPostIdScrapPostRequestParams = {
  postId: number
  options?: any
}

/**
 * 게시글을 스크랩합니다. 만일 이미 스크랩한 게시글이라면 스크랩을 취소합니다.
 * @summary 게시글 스크랩
 * @param {number} postId 게시글의 고유 ID
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const postPostIdScrapPost = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: PostPostIdScrapPostRequestParams): AxiosPromise<ScrapPostResponseDto> => {
    return postPostIdScrapPostFp(params.postId, params.options, configuration).then(request => request(axios, basePath))
  }
}

export type PostReactGetRequestParams = {
  take?: number
  cursor?: string
  options?: any
}

/**
 * 반응을 남긴 글 목록을 조회합니다.
 * @summary 반응 남긴 글 목록 조회
 * @param {number} [take] 한 페이지에 담을 데이터 수, default &#x3D; 10
 * @param {string} [cursor] 커서 값, 14자리 숫자로 이루어진 문자열, 없으면 첫페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const postReactGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: PostReactGetRequestParams): AxiosPromise<GetPostListResponseDto> => {
    return postReactGetFp(params.take, params.cursor, params.options, configuration).then(request =>
      request(axios, basePath),
    )
  }
}

export type PostScrapGetRequestParams = {
  take?: number
  cursor?: string
  options?: any
}

/**
 * 스크랩한 글 목록을 조회합니다.
 * @summary 스크랩한 글 목록 조회
 * @param {number} [take] 한 페이지에 담을 데이터 수, default &#x3D; 10
 * @param {string} [cursor] 커서 값, 14자리 숫자로 이루어진 문자열, 없으면 첫페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const postScrapGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: PostScrapGetRequestParams): AxiosPromise<GetPostListResponseDto> => {
    return postScrapGetFp(params.take, params.cursor, params.options, configuration).then(request =>
      request(axios, basePath),
    )
  }
}

export const getpostAllGetPath = (take?: number, cursor?: string, keyword?: string) => {
  return `/post/all`
}
export const getpostGetPath = (boardId: number, take?: number, cursor?: string, keyword?: string) => {
  return `/post`
}
export const getpostHotGetPath = (take?: number, cursor?: string) => {
  return `/post/hot`
}
export const getpostMyGetPath = (take?: number, cursor?: string) => {
  return `/post/my`
}
export const getpostPostPath = (
  boardId: number,
  title: string,
  content: string,
  isAnonymous: boolean,
  images?: Array<any>,
) => {
  return `/post`
}
export const getpostPostIdDeletePath = (postId: number) => {
  return `/post/{postId}`.replace(`{${'postId'}}`, encodeURIComponent(String(postId)))
}
export const getpostPostIdGetPath = (postId: number) => {
  return `/post/{postId}`.replace(`{${'postId'}}`, encodeURIComponent(String(postId)))
}
export const getpostPostIdPatchPath = (
  postId: number,
  title: string,
  content: string,
  isAnonymous: boolean,
  imageUpdate: boolean,
  images?: Array<any>,
) => {
  return `/post/{postId}`.replace(`{${'postId'}}`, encodeURIComponent(String(postId)))
}
export const getpostPostIdReactionPostPath = (postId: number, reactPostRequestDto: ReactPostRequestDto) => {
  return `/post/{postId}/reaction`.replace(`{${'postId'}}`, encodeURIComponent(String(postId)))
}
export const getpostPostIdReportPostPath = (postId: number, createReportRequestDto: CreateReportRequestDto) => {
  return `/post/{postId}/report`.replace(`{${'postId'}}`, encodeURIComponent(String(postId)))
}
export const getpostPostIdScrapPostPath = (postId: number) => {
  return `/post/{postId}/scrap`.replace(`{${'postId'}}`, encodeURIComponent(String(postId)))
}
export const getpostReactGetPath = (take?: number, cursor?: string) => {
  return `/post/react`
}
export const getpostScrapGetPath = (take?: number, cursor?: string) => {
  return `/post/scrap`
}
