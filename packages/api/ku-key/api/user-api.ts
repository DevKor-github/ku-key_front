/* tslint:disable */
/* eslint-disable */
/**
 * KU-KEY API
 * API for KU-KEY service
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, toPathString, createRequestFunction } from '../common'
// @ts-ignore
import { COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'

// @ts-ignore
import { CheckCourseReviewReadingTicketResponseDto } from '../models'
// @ts-ignore
import { DeleteUserResponseDto } from '../models'
// @ts-ignore
import { GetPointHistoryResponseDto } from '../models'
// @ts-ignore
import { GetProfileResponseDto } from '../models'
// @ts-ignore
import { LanguageRequestDto } from '../models'
// @ts-ignore
import { LanguageResponseDto } from '../models'
// @ts-ignore
import { PurchaseItemRequestDto } from '../models'
// @ts-ignore
import { PurchaseItemResponseDto } from '../models'
// @ts-ignore
import { SelectCharacterLevelRequestDto } from '../models'
// @ts-ignore
import { SelectCharacterLevelResponseDto } from '../models'
// @ts-ignore
import { SetExchangeDayReqeustDto } from '../models'
// @ts-ignore
import { SetProfileRequestDto } from '../models'
// @ts-ignore
import { SetResponseDto } from '../models'
/**
 * UserApi - axios parameter creator
 * @export
 */
/**
 * 현재 해금된 최대 레벨 이하의 캐릭터 레벨 중 하나를 선택합니다.
 * @summary 캐릭터 레벨 선택
 * @param {SelectCharacterLevelRequestDto} selectCharacterLevelRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const userCharacterLevelPatchAxiosParamCreator = async (
  selectCharacterLevelRequestDto: SelectCharacterLevelRequestDto,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/user/character-level`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  localVarHeaderParameter['Content-Type'] = 'application/json'

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
  localVarRequestOptions.data = selectCharacterLevelRequestDto || undefined

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 해당 사용자의 강의평 열람권이 만료되었는지 확인 후 만료되었으면 null, 만료되지 않았으면 강의평 열람권 만료일자를 반환합니다.
 * @summary 강의평 열람권 만료 조회
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const userCourseReviewReadingTicketGetAxiosParamCreator = async (
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/user/course-review-reading-ticket`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 사용자의 계정을 삭제합니다.
 * @summary 회원탈퇴
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const userDeleteAxiosParamCreator = async (
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/user`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 교환학생 남은 일자를 설정(변경) 합니다
 * @summary 교환 남은 일자 설정
 * @param {SetExchangeDayReqeustDto} setExchangeDayReqeustDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const userExchangeDayPatchAxiosParamCreator = async (
  setExchangeDayReqeustDto: SetExchangeDayReqeustDto,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/user/exchange-day`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  localVarHeaderParameter['Content-Type'] = 'application/json'

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
  localVarRequestOptions.data = setExchangeDayReqeustDto || undefined

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 언어를 삭제 합니다
 * @summary 언어 삭제
 * @param {LanguageRequestDto} languageRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const userLanguageDeleteAxiosParamCreator = async (
  languageRequestDto: LanguageRequestDto,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/user/language`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  localVarHeaderParameter['Content-Type'] = 'application/json'

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
  localVarRequestOptions.data = languageRequestDto || undefined

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 언어를 추가 합니다
 * @summary 언어 추가
 * @param {LanguageRequestDto} languageRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const userLanguagePostAxiosParamCreator = async (
  languageRequestDto: LanguageRequestDto,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/user/language`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  localVarHeaderParameter['Content-Type'] = 'application/json'

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
  localVarRequestOptions.data = languageRequestDto || undefined

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 포인트 획득/사용 내역을 조회 합니다
 * @summary 포인트 내역 조회
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const userPointHistoryGetAxiosParamCreator = async (
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/user/point-history`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 프로필을 조회 합니다
 * @summary 프로필 조회
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const userProfileGetAxiosParamCreator = async (
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/user/profile`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 프로필을 설정(변경) 합니다
 * @summary 프로필 설정
 * @param {SetProfileRequestDto} setProfileRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const userProfilePatchAxiosParamCreator = async (
  setProfileRequestDto: SetProfileRequestDto,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/user/profile`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  localVarHeaderParameter['Content-Type'] = 'application/json'

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
  localVarRequestOptions.data = setProfileRequestDto || undefined

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 포인트 샵에서 아이템을 구매합니다.
 * @summary 아이템 구매
 * @param {PurchaseItemRequestDto} purchaseItemRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const userPurchaseItemPostAxiosParamCreator = async (
  purchaseItemRequestDto: PurchaseItemRequestDto,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/user/purchase-item`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  localVarHeaderParameter['Content-Type'] = 'application/json'

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
  localVarRequestOptions.data = purchaseItemRequestDto || undefined

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}

/**
 * UserApi - functional programming interface
 * @export
 */
/**
 * 현재 해금된 최대 레벨 이하의 캐릭터 레벨 중 하나를 선택합니다.
 * @summary 캐릭터 레벨 선택
 * @param {SelectCharacterLevelRequestDto} selectCharacterLevelRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const userCharacterLevelPatchFp = async (
  selectCharacterLevelRequestDto: SelectCharacterLevelRequestDto,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelectCharacterLevelResponseDto>> => {
  const localVarAxiosArgs = await userCharacterLevelPatchAxiosParamCreator(
    selectCharacterLevelRequestDto,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 해당 사용자의 강의평 열람권이 만료되었는지 확인 후 만료되었으면 null, 만료되지 않았으면 강의평 열람권 만료일자를 반환합니다.
 * @summary 강의평 열람권 만료 조회
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const userCourseReviewReadingTicketGetFp = async (
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckCourseReviewReadingTicketResponseDto>> => {
  const localVarAxiosArgs = await userCourseReviewReadingTicketGetAxiosParamCreator(options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 사용자의 계정을 삭제합니다.
 * @summary 회원탈퇴
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const userDeleteFp = async (
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteUserResponseDto>> => {
  const localVarAxiosArgs = await userDeleteAxiosParamCreator(options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 교환학생 남은 일자를 설정(변경) 합니다
 * @summary 교환 남은 일자 설정
 * @param {SetExchangeDayReqeustDto} setExchangeDayReqeustDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const userExchangeDayPatchFp = async (
  setExchangeDayReqeustDto: SetExchangeDayReqeustDto,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetResponseDto>> => {
  const localVarAxiosArgs = await userExchangeDayPatchAxiosParamCreator(
    setExchangeDayReqeustDto,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 언어를 삭제 합니다
 * @summary 언어 삭제
 * @param {LanguageRequestDto} languageRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const userLanguageDeleteFp = async (
  languageRequestDto: LanguageRequestDto,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanguageResponseDto>> => {
  const localVarAxiosArgs = await userLanguageDeleteAxiosParamCreator(languageRequestDto, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 언어를 추가 합니다
 * @summary 언어 추가
 * @param {LanguageRequestDto} languageRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const userLanguagePostFp = async (
  languageRequestDto: LanguageRequestDto,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanguageResponseDto>> => {
  const localVarAxiosArgs = await userLanguagePostAxiosParamCreator(languageRequestDto, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 포인트 획득/사용 내역을 조회 합니다
 * @summary 포인트 내역 조회
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const userPointHistoryGetFp = async (
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPointHistoryResponseDto>>> => {
  const localVarAxiosArgs = await userPointHistoryGetAxiosParamCreator(options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 프로필을 조회 합니다
 * @summary 프로필 조회
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const userProfileGetFp = async (
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProfileResponseDto>> => {
  const localVarAxiosArgs = await userProfileGetAxiosParamCreator(options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 프로필을 설정(변경) 합니다
 * @summary 프로필 설정
 * @param {SetProfileRequestDto} setProfileRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const userProfilePatchFp = async (
  setProfileRequestDto: SetProfileRequestDto,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetResponseDto>> => {
  const localVarAxiosArgs = await userProfilePatchAxiosParamCreator(setProfileRequestDto, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 포인트 샵에서 아이템을 구매합니다.
 * @summary 아이템 구매
 * @param {PurchaseItemRequestDto} purchaseItemRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const userPurchaseItemPostFp = async (
  purchaseItemRequestDto: PurchaseItemRequestDto,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseItemResponseDto>> => {
  const localVarAxiosArgs = await userPurchaseItemPostAxiosParamCreator(purchaseItemRequestDto, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}

/**
 * UserApi - factory interface
 * @export
 */

export type UserCharacterLevelPatchRequestParams = {
  selectCharacterLevelRequestDto: SelectCharacterLevelRequestDto
  options?: any
}

/**
 * 현재 해금된 최대 레벨 이하의 캐릭터 레벨 중 하나를 선택합니다.
 * @summary 캐릭터 레벨 선택
 * @param {SelectCharacterLevelRequestDto} selectCharacterLevelRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const userCharacterLevelPatch = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: UserCharacterLevelPatchRequestParams): AxiosPromise<SelectCharacterLevelResponseDto> => {
    return userCharacterLevelPatchFp(params.selectCharacterLevelRequestDto, params.options, configuration).then(
      request => request(axios, basePath),
    )
  }
}

export type UserCourseReviewReadingTicketGetRequestParams = {
  options?: any
}

/**
 * 해당 사용자의 강의평 열람권이 만료되었는지 확인 후 만료되었으면 null, 만료되지 않았으면 강의평 열람권 만료일자를 반환합니다.
 * @summary 강의평 열람권 만료 조회
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const userCourseReviewReadingTicketGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params?: { options?: any }): AxiosPromise<CheckCourseReviewReadingTicketResponseDto> => {
    return userCourseReviewReadingTicketGetFp(params?.options, configuration).then(request => request(axios, basePath))
  }
}

export type UserDeleteRequestParams = {
  options?: any
}

/**
 * 사용자의 계정을 삭제합니다.
 * @summary 회원탈퇴
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const userDelete = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params?: { options?: any }): AxiosPromise<DeleteUserResponseDto> => {
    return userDeleteFp(params?.options, configuration).then(request => request(axios, basePath))
  }
}

export type UserExchangeDayPatchRequestParams = {
  setExchangeDayReqeustDto: SetExchangeDayReqeustDto
  options?: any
}

/**
 * 교환학생 남은 일자를 설정(변경) 합니다
 * @summary 교환 남은 일자 설정
 * @param {SetExchangeDayReqeustDto} setExchangeDayReqeustDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const userExchangeDayPatch = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: UserExchangeDayPatchRequestParams): AxiosPromise<SetResponseDto> => {
    return userExchangeDayPatchFp(params.setExchangeDayReqeustDto, params.options, configuration).then(request =>
      request(axios, basePath),
    )
  }
}

export type UserLanguageDeleteRequestParams = {
  languageRequestDto: LanguageRequestDto
  options?: any
}

/**
 * 언어를 삭제 합니다
 * @summary 언어 삭제
 * @param {LanguageRequestDto} languageRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const userLanguageDelete = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: UserLanguageDeleteRequestParams): AxiosPromise<LanguageResponseDto> => {
    return userLanguageDeleteFp(params.languageRequestDto, params.options, configuration).then(request =>
      request(axios, basePath),
    )
  }
}

export type UserLanguagePostRequestParams = {
  languageRequestDto: LanguageRequestDto
  options?: any
}

/**
 * 언어를 추가 합니다
 * @summary 언어 추가
 * @param {LanguageRequestDto} languageRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const userLanguagePost = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: UserLanguagePostRequestParams): AxiosPromise<LanguageResponseDto> => {
    return userLanguagePostFp(params.languageRequestDto, params.options, configuration).then(request =>
      request(axios, basePath),
    )
  }
}

export type UserPointHistoryGetRequestParams = {
  options?: any
}

/**
 * 포인트 획득/사용 내역을 조회 합니다
 * @summary 포인트 내역 조회
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const userPointHistoryGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params?: { options?: any }): AxiosPromise<Array<GetPointHistoryResponseDto>> => {
    return userPointHistoryGetFp(params?.options, configuration).then(request => request(axios, basePath))
  }
}

export type UserProfileGetRequestParams = {
  options?: any
}

/**
 * 프로필을 조회 합니다
 * @summary 프로필 조회
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const userProfileGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params?: { options?: any }): AxiosPromise<GetProfileResponseDto> => {
    return userProfileGetFp(params?.options, configuration).then(request => request(axios, basePath))
  }
}

export type UserProfilePatchRequestParams = {
  setProfileRequestDto: SetProfileRequestDto
  options?: any
}

/**
 * 프로필을 설정(변경) 합니다
 * @summary 프로필 설정
 * @param {SetProfileRequestDto} setProfileRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const userProfilePatch = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: UserProfilePatchRequestParams): AxiosPromise<SetResponseDto> => {
    return userProfilePatchFp(params.setProfileRequestDto, params.options, configuration).then(request =>
      request(axios, basePath),
    )
  }
}

export type UserPurchaseItemPostRequestParams = {
  purchaseItemRequestDto: PurchaseItemRequestDto
  options?: any
}

/**
 * 포인트 샵에서 아이템을 구매합니다.
 * @summary 아이템 구매
 * @param {PurchaseItemRequestDto} purchaseItemRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const userPurchaseItemPost = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: UserPurchaseItemPostRequestParams): AxiosPromise<PurchaseItemResponseDto> => {
    return userPurchaseItemPostFp(params.purchaseItemRequestDto, params.options, configuration).then(request =>
      request(axios, basePath),
    )
  }
}
