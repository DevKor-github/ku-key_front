/* tslint:disable */
/* eslint-disable */
/**
 * KU-KEY API
 * API for KU-KEY service
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, toPathString, createRequestFunction } from '../common'
// @ts-ignore
import { COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'

// @ts-ignore
import { CreateClubResponseDto } from '../models'
// @ts-ignore
import { DeleteClubResponseDto } from '../models'
// @ts-ignore
import { GetClubResponseDto } from '../models'
// @ts-ignore
import { GetHotClubResponseDto } from '../models'
// @ts-ignore
import { GetRecommendClubResponseDto } from '../models'
// @ts-ignore
import { UpdateClubResponseDto } from '../models'
/**
 * ClubApi - axios parameter creator
 * @export
 */
/**
 * 동아리 id를 받아 admin page에서 동아리 정보를 삭제합니다.
 * @summary 동아리 정보 삭제
 * @param {number} clubId 동아리 id
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const clubClubIdDeleteAxiosParamCreator = async (
  clubId: number,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/club/{clubId}`.replace(`{${'clubId'}}`, encodeURIComponent(String(clubId)))
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 동아리 id를 받아 admin page에서 동아리 정보를 수정합니다.
 * @summary 동아리 정보 수정
 * @param {number} clubId 동아리 id
 * @param {string} [name] 동아리명
 * @param {string} [category] 카테고리
 * @param {string} [summary] 동아리 요약
 * @param {string} [regularMeeting] 정기 모임
 * @param {string} [recruitmentPeriod] 모집 기간
 * @param {string} [description] 동아리 설명
 * @param {any} [clubImage] 동아리 이미지 파일
 * @param {string} [instagramLink] 인스타그램 링크
 * @param {string} [youtubeLink] 유튜브 링크
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const clubClubIdPatchAxiosParamCreator = async (
  clubId: number,
  name?: string,
  category?: string,
  summary?: string,
  regularMeeting?: string,
  recruitmentPeriod?: string,
  description?: string,
  clubImage?: any,
  instagramLink?: string,
  youtubeLink?: string,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/club/{clubId}`.replace(`{${'clubId'}}`, encodeURIComponent(String(clubId)))
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)()

  if (name !== undefined) {
    localVarFormParams.append('name', name as any)
  }

  if (category !== undefined) {
    localVarFormParams.append('category', category as any)
  }

  if (summary !== undefined) {
    localVarFormParams.append('summary', summary as any)
  }

  if (regularMeeting !== undefined) {
    localVarFormParams.append('regularMeeting', regularMeeting as any)
  }

  if (recruitmentPeriod !== undefined) {
    localVarFormParams.append('recruitmentPeriod', recruitmentPeriod as any)
  }

  if (description !== undefined) {
    localVarFormParams.append('description', description as any)
  }

  if (clubImage !== undefined) {
    localVarFormParams.append('clubImage', clubImage as any)
  }

  if (instagramLink !== undefined) {
    localVarFormParams.append('instagramLink', instagramLink as any)
  }

  if (youtubeLink !== undefined) {
    localVarFormParams.append('youtubeLink', youtubeLink as any)
  }

  localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
  localVarRequestOptions.data = localVarFormParams

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 동아리 전체 목록을 조회하거나, 좋아요 여부, 소속/분과, 검색어(동아리명, 동아리 요약)로 필터링 및 좋아요 순으로 정렬하여 조회합니다.
 * @summary 동아리 목록 조회
 * @param {boolean} isLogin 로그인 여부
 * @param {string} [sortBy] 정렬 방식 (좋아요 순 : like)
 * @param {boolean} [wishList] 좋아요 누른 동아리만 필터링 (true / false)
 * @param {'Performing Arts' | 'Academic Research' | 'Sports' | 'Religious' | 'Exhibition & Creative Writing' | 'Humanities' | 'Living Culture' | 'Social' | 'Instrumental Arts'} [category] 소속/분과별 필터링
 * @param {string} [keyword] 동아리명/동아리 요약 검색 키워드
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const clubGetAxiosParamCreator = async (
  isLogin: boolean,
  sortBy?: string,
  wishList?: boolean,
  category?:
    | 'Performing Arts'
    | 'Academic Research'
    | 'Sports'
    | 'Religious'
    | 'Exhibition & Creative Writing'
    | 'Humanities'
    | 'Living Culture'
    | 'Social'
    | 'Instrumental Arts',
  keyword?: string,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/club`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (sortBy !== undefined) {
    localVarQueryParameter['sortBy'] = sortBy
  }

  if (wishList !== undefined) {
    localVarQueryParameter['wishList'] = wishList
  }

  if (category !== undefined) {
    localVarQueryParameter['category'] = category
  }

  if (keyword !== undefined) {
    localVarQueryParameter['keyword'] = keyword
  }

  if (isLogin !== undefined) {
    localVarQueryParameter['isLogin'] = isLogin
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 최근 일주일 동안 좋아요 개수가 가장 많은 동아리 4개를 반환합니다.
 * @summary Hot Club 목록 조회
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const clubHotGetAxiosParamCreator = async (
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/club/hot`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 이미 동아리 좋아요 눌러져 있으면 해제, 그렇지 않다면 좋아요 등록
 * @summary 동아리 좋아요 등록/해제
 * @param {number} clubId 좋아요 누를 동아리 id
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const clubLikeClubIdPostAxiosParamCreator = async (
  clubId: number,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/club/like/{clubId}`.replace(`{${'clubId'}}`, encodeURIComponent(String(clubId)))
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * Admin page에서 새로운 동아리를 생성합니다.
 * @summary 동아리 생성
 * @param {string} name 동아리명
 * @param {string} category 카테고리
 * @param {string} summary 동아리 요약
 * @param {string} regularMeeting 정기 모임
 * @param {string} recruitmentPeriod 모집 기간
 * @param {string} description 동아리 설명
 * @param {any} clubImage 동아리 이미지 파일
 * @param {string} [instagramLink] 인스타그램 링크
 * @param {string} [youtubeLink] 유튜브 링크
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const clubPostAxiosParamCreator = async (
  name: string,
  category: string,
  summary: string,
  regularMeeting: string,
  recruitmentPeriod: string,
  description: string,
  clubImage: any,
  instagramLink?: string,
  youtubeLink?: string,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/club`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)()

  if (name !== undefined) {
    localVarFormParams.append('name', name as any)
  }

  if (category !== undefined) {
    localVarFormParams.append('category', category as any)
  }

  if (summary !== undefined) {
    localVarFormParams.append('summary', summary as any)
  }

  if (regularMeeting !== undefined) {
    localVarFormParams.append('regularMeeting', regularMeeting as any)
  }

  if (recruitmentPeriod !== undefined) {
    localVarFormParams.append('recruitmentPeriod', recruitmentPeriod as any)
  }

  if (description !== undefined) {
    localVarFormParams.append('description', description as any)
  }

  if (clubImage !== undefined) {
    localVarFormParams.append('clubImage', clubImage as any)
  }

  if (instagramLink !== undefined) {
    localVarFormParams.append('instagramLink', instagramLink as any)
  }

  if (youtubeLink !== undefined) {
    localVarFormParams.append('youtubeLink', youtubeLink as any)
  }

  localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
  localVarRequestOptions.data = localVarFormParams

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 최초에 무작위로 추천, 이후 좋아요를 누른 동아리가 있다면 그와 같은 카테고리 내에서 추천
 * @summary Recommend Club 목록 조회
 * @param {boolean} isLogin 로그인 여부
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const clubRecommendGetAxiosParamCreator = async (
  isLogin: boolean,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/club/recommend`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (isLogin !== undefined) {
    localVarQueryParameter['isLogin'] = isLogin
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}

/**
 * ClubApi - functional programming interface
 * @export
 */
/**
 * 동아리 id를 받아 admin page에서 동아리 정보를 삭제합니다.
 * @summary 동아리 정보 삭제
 * @param {number} clubId 동아리 id
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const clubClubIdDeleteFp = async (
  clubId: number,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteClubResponseDto>> => {
  const localVarAxiosArgs = await clubClubIdDeleteAxiosParamCreator(clubId, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 동아리 id를 받아 admin page에서 동아리 정보를 수정합니다.
 * @summary 동아리 정보 수정
 * @param {number} clubId 동아리 id
 * @param {string} [name] 동아리명
 * @param {string} [category] 카테고리
 * @param {string} [summary] 동아리 요약
 * @param {string} [regularMeeting] 정기 모임
 * @param {string} [recruitmentPeriod] 모집 기간
 * @param {string} [description] 동아리 설명
 * @param {any} [clubImage] 동아리 이미지 파일
 * @param {string} [instagramLink] 인스타그램 링크
 * @param {string} [youtubeLink] 유튜브 링크
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const clubClubIdPatchFp = async (
  clubId: number,
  name?: string,
  category?: string,
  summary?: string,
  regularMeeting?: string,
  recruitmentPeriod?: string,
  description?: string,
  clubImage?: any,
  instagramLink?: string,
  youtubeLink?: string,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateClubResponseDto>> => {
  const localVarAxiosArgs = await clubClubIdPatchAxiosParamCreator(
    clubId,
    name,
    category,
    summary,
    regularMeeting,
    recruitmentPeriod,
    description,
    clubImage,
    instagramLink,
    youtubeLink,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 동아리 전체 목록을 조회하거나, 좋아요 여부, 소속/분과, 검색어(동아리명, 동아리 요약)로 필터링 및 좋아요 순으로 정렬하여 조회합니다.
 * @summary 동아리 목록 조회
 * @param {boolean} isLogin 로그인 여부
 * @param {string} [sortBy] 정렬 방식 (좋아요 순 : like)
 * @param {boolean} [wishList] 좋아요 누른 동아리만 필터링 (true / false)
 * @param {'Performing Arts' | 'Academic Research' | 'Sports' | 'Religious' | 'Exhibition & Creative Writing' | 'Humanities' | 'Living Culture' | 'Social' | 'Instrumental Arts'} [category] 소속/분과별 필터링
 * @param {string} [keyword] 동아리명/동아리 요약 검색 키워드
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const clubGetFp = async (
  isLogin: boolean,
  sortBy?: string,
  wishList?: boolean,
  category?:
    | 'Performing Arts'
    | 'Academic Research'
    | 'Sports'
    | 'Religious'
    | 'Exhibition & Creative Writing'
    | 'Humanities'
    | 'Living Culture'
    | 'Social'
    | 'Instrumental Arts',
  keyword?: string,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetClubResponseDto>>> => {
  const localVarAxiosArgs = await clubGetAxiosParamCreator(
    isLogin,
    sortBy,
    wishList,
    category,
    keyword,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 최근 일주일 동안 좋아요 개수가 가장 많은 동아리 4개를 반환합니다.
 * @summary Hot Club 목록 조회
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const clubHotGetFp = async (
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetHotClubResponseDto>>> => {
  const localVarAxiosArgs = await clubHotGetAxiosParamCreator(options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 이미 동아리 좋아요 눌러져 있으면 해제, 그렇지 않다면 좋아요 등록
 * @summary 동아리 좋아요 등록/해제
 * @param {number} clubId 좋아요 누를 동아리 id
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const clubLikeClubIdPostFp = async (
  clubId: number,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetClubResponseDto>> => {
  const localVarAxiosArgs = await clubLikeClubIdPostAxiosParamCreator(clubId, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * Admin page에서 새로운 동아리를 생성합니다.
 * @summary 동아리 생성
 * @param {string} name 동아리명
 * @param {string} category 카테고리
 * @param {string} summary 동아리 요약
 * @param {string} regularMeeting 정기 모임
 * @param {string} recruitmentPeriod 모집 기간
 * @param {string} description 동아리 설명
 * @param {any} clubImage 동아리 이미지 파일
 * @param {string} [instagramLink] 인스타그램 링크
 * @param {string} [youtubeLink] 유튜브 링크
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const clubPostFp = async (
  name: string,
  category: string,
  summary: string,
  regularMeeting: string,
  recruitmentPeriod: string,
  description: string,
  clubImage: any,
  instagramLink?: string,
  youtubeLink?: string,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateClubResponseDto>> => {
  const localVarAxiosArgs = await clubPostAxiosParamCreator(
    name,
    category,
    summary,
    regularMeeting,
    recruitmentPeriod,
    description,
    clubImage,
    instagramLink,
    youtubeLink,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 최초에 무작위로 추천, 이후 좋아요를 누른 동아리가 있다면 그와 같은 카테고리 내에서 추천
 * @summary Recommend Club 목록 조회
 * @param {boolean} isLogin 로그인 여부
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const clubRecommendGetFp = async (
  isLogin: boolean,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRecommendClubResponseDto>>> => {
  const localVarAxiosArgs = await clubRecommendGetAxiosParamCreator(isLogin, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}

/**
 * ClubApi - factory interface
 * @export
 */

export type ClubClubIdDeleteRequestParams = {
  clubId: number
  options?: any
}

/**
 * 동아리 id를 받아 admin page에서 동아리 정보를 삭제합니다.
 * @summary 동아리 정보 삭제
 * @param {number} clubId 동아리 id
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const clubClubIdDelete = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: ClubClubIdDeleteRequestParams): AxiosPromise<DeleteClubResponseDto> => {
    return clubClubIdDeleteFp(params.clubId, params.options, configuration).then(request => request(axios, basePath))
  }
}

export type ClubClubIdPatchRequestParams = {
  clubId: number
  name?: string
  category?: string
  summary?: string
  regularMeeting?: string
  recruitmentPeriod?: string
  description?: string
  clubImage?: any
  instagramLink?: string
  youtubeLink?: string
  options?: any
}

/**
 * 동아리 id를 받아 admin page에서 동아리 정보를 수정합니다.
 * @summary 동아리 정보 수정
 * @param {number} clubId 동아리 id
 * @param {string} [name] 동아리명
 * @param {string} [category] 카테고리
 * @param {string} [summary] 동아리 요약
 * @param {string} [regularMeeting] 정기 모임
 * @param {string} [recruitmentPeriod] 모집 기간
 * @param {string} [description] 동아리 설명
 * @param {any} [clubImage] 동아리 이미지 파일
 * @param {string} [instagramLink] 인스타그램 링크
 * @param {string} [youtubeLink] 유튜브 링크
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const clubClubIdPatch = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: ClubClubIdPatchRequestParams): AxiosPromise<UpdateClubResponseDto> => {
    return clubClubIdPatchFp(
      params.clubId,
      params.name,
      params.category,
      params.summary,
      params.regularMeeting,
      params.recruitmentPeriod,
      params.description,
      params.clubImage,
      params.instagramLink,
      params.youtubeLink,
      params.options,
      configuration,
    ).then(request => request(axios, basePath))
  }
}

export type ClubGetRequestParams = {
  isLogin: boolean
  sortBy?: string
  wishList?: boolean
  category?:
    | 'Performing Arts'
    | 'Academic Research'
    | 'Sports'
    | 'Religious'
    | 'Exhibition & Creative Writing'
    | 'Humanities'
    | 'Living Culture'
    | 'Social'
    | 'Instrumental Arts'
  keyword?: string
  options?: any
}

/**
 * 동아리 전체 목록을 조회하거나, 좋아요 여부, 소속/분과, 검색어(동아리명, 동아리 요약)로 필터링 및 좋아요 순으로 정렬하여 조회합니다.
 * @summary 동아리 목록 조회
 * @param {boolean} isLogin 로그인 여부
 * @param {string} [sortBy] 정렬 방식 (좋아요 순 : like)
 * @param {boolean} [wishList] 좋아요 누른 동아리만 필터링 (true / false)
 * @param {'Performing Arts' | 'Academic Research' | 'Sports' | 'Religious' | 'Exhibition & Creative Writing' | 'Humanities' | 'Living Culture' | 'Social' | 'Instrumental Arts'} [category] 소속/분과별 필터링
 * @param {string} [keyword] 동아리명/동아리 요약 검색 키워드
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const clubGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: ClubGetRequestParams): AxiosPromise<Array<GetClubResponseDto>> => {
    return clubGetFp(
      params.isLogin,
      params.sortBy,
      params.wishList,
      params.category,
      params.keyword,
      params.options,
      configuration,
    ).then(request => request(axios, basePath))
  }
}

export type ClubHotGetRequestParams = {
  options?: any
}

/**
 * 최근 일주일 동안 좋아요 개수가 가장 많은 동아리 4개를 반환합니다.
 * @summary Hot Club 목록 조회
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const clubHotGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params?: { options?: any }): AxiosPromise<Array<GetHotClubResponseDto>> => {
    return clubHotGetFp(params?.options, configuration).then(request => request(axios, basePath))
  }
}

export type ClubLikeClubIdPostRequestParams = {
  clubId: number
  options?: any
}

/**
 * 이미 동아리 좋아요 눌러져 있으면 해제, 그렇지 않다면 좋아요 등록
 * @summary 동아리 좋아요 등록/해제
 * @param {number} clubId 좋아요 누를 동아리 id
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const clubLikeClubIdPost = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: ClubLikeClubIdPostRequestParams): AxiosPromise<GetClubResponseDto> => {
    return clubLikeClubIdPostFp(params.clubId, params.options, configuration).then(request => request(axios, basePath))
  }
}

export type ClubPostRequestParams = {
  name: string
  category: string
  summary: string
  regularMeeting: string
  recruitmentPeriod: string
  description: string
  clubImage: any
  instagramLink?: string
  youtubeLink?: string
  options?: any
}

/**
 * Admin page에서 새로운 동아리를 생성합니다.
 * @summary 동아리 생성
 * @param {string} name 동아리명
 * @param {string} category 카테고리
 * @param {string} summary 동아리 요약
 * @param {string} regularMeeting 정기 모임
 * @param {string} recruitmentPeriod 모집 기간
 * @param {string} description 동아리 설명
 * @param {any} clubImage 동아리 이미지 파일
 * @param {string} [instagramLink] 인스타그램 링크
 * @param {string} [youtubeLink] 유튜브 링크
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const clubPost = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: ClubPostRequestParams): AxiosPromise<CreateClubResponseDto> => {
    return clubPostFp(
      params.name,
      params.category,
      params.summary,
      params.regularMeeting,
      params.recruitmentPeriod,
      params.description,
      params.clubImage,
      params.instagramLink,
      params.youtubeLink,
      params.options,
      configuration,
    ).then(request => request(axios, basePath))
  }
}

export type ClubRecommendGetRequestParams = {
  isLogin: boolean
  options?: any
}

/**
 * 최초에 무작위로 추천, 이후 좋아요를 누른 동아리가 있다면 그와 같은 카테고리 내에서 추천
 * @summary Recommend Club 목록 조회
 * @param {boolean} isLogin 로그인 여부
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const clubRecommendGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: ClubRecommendGetRequestParams): AxiosPromise<Array<GetRecommendClubResponseDto>> => {
    return clubRecommendGetFp(params.isLogin, params.options, configuration).then(request => request(axios, basePath))
  }
}
