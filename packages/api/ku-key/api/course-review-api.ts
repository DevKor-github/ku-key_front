/* tslint:disable */
/* eslint-disable */
/**
 * KU-KEY API
 * API for KU-KEY service
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'

// @ts-ignore
import { CourseReviewResponseDto } from '../models'
// @ts-ignore
import { CreateCourseReviewRequestDto } from '../models'
// @ts-ignore
import { GetCourseReviewSummaryResponseDto } from '../models'
// @ts-ignore
import { GetCourseReviewsResponseDto } from '../models'
/**
 * CourseReviewApi - axios parameter creator
 * @export
 */
/**
 * 해당 강의에 대해 이미 강의평을 작성했으면 true, 아니면 false 반환
 * @summary 이미 해당 강의에 대해 강의평 작성했는 지 조회
 * @param {string} professorName 교수님 성함
 * @param {string} courseCode 학수번호
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseReviewCheckSubmissionGetAxiosParamCreator = async (
  professorName: string,
  courseCode: string,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/course-review/check-submission`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (professorName !== undefined) {
    localVarQueryParameter['professorName'] = professorName
  }

  if (courseCode !== undefined) {
    localVarQueryParameter['courseCode'] = courseCode
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 해당 교수의 해당 강의에 대해 강의평을 조회합니다. 열람권이 없으면 열람할 수 없습니다.
 * @summary 강의평 조회
 * @param {string} professorName 교수님 성함
 * @param {string} courseCode 학수번호
 * @param {string} criteria 검색 필터 기준
 * @param {string} direction 오름차순 / 내림차순
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseReviewGetAxiosParamCreator = async (
  professorName: string,
  courseCode: string,
  criteria: string,
  direction: string,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/course-review`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (professorName !== undefined) {
    localVarQueryParameter['professorName'] = professorName
  }

  if (courseCode !== undefined) {
    localVarQueryParameter['courseCode'] = courseCode
  }

  if (criteria !== undefined) {
    localVarQueryParameter['criteria'] = criteria
  }

  if (direction !== undefined) {
    localVarQueryParameter['direction'] = direction
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 내가 작성한 강의평을 조회합니다.
 * @summary 내 강의평 조회
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseReviewMyCourseReviewsGetAxiosParamCreator = async (
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/course-review/my-course-reviews`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 강의평을 추가합니다. 유저가 해당 강의에 대해 이미 강의평을 등록했으면 더 이상 등록되지 않습니다.
 * @summary 강의평 추가
 * @param {CreateCourseReviewRequestDto} createCourseReviewRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseReviewPostAxiosParamCreator = async (
  createCourseReviewRequestDto: CreateCourseReviewRequestDto,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/course-review`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  localVarHeaderParameter['Content-Type'] = 'application/json'

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
  localVarRequestOptions.data = createCourseReviewRequestDto || undefined

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 강의평에 추천을 누릅니다. 이미 추천한 강의평이면 추천이 취소됩니다. 내가 쓴 강의평은 추천할 수 없습니다.
 * @summary 강의평 추천
 * @param {number} courseReviewId
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseReviewRecommendCourseReviewIdPostAxiosParamCreator = async (
  courseReviewId: number,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/course-review/recommend/{courseReviewId}`.replace(
    `{${'courseReviewId'}}`,
    encodeURIComponent(String(courseReviewId)),
  )
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 해당 교수의 해당 강의에 대한 강의평들을 종합한 강의평 요약을 조회합니다.
 * @summary 강의평 요약 조회
 * @param {string} professorName 교수님 성함
 * @param {string} courseCode 학수번호
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseReviewSummaryGetAxiosParamCreator = async (
  professorName: string,
  courseCode: string,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/course-review/summary`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (professorName !== undefined) {
    localVarQueryParameter['professorName'] = professorName
  }

  if (courseCode !== undefined) {
    localVarQueryParameter['courseCode'] = courseCode
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}

/**
 * CourseReviewApi - functional programming interface
 * @export
 */
/**
 * 해당 강의에 대해 이미 강의평을 작성했으면 true, 아니면 false 반환
 * @summary 이미 해당 강의에 대해 강의평 작성했는 지 조회
 * @param {string} professorName 교수님 성함
 * @param {string} courseCode 학수번호
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseReviewCheckSubmissionGetFp = async (
  professorName: string,
  courseCode: string,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> => {
  const localVarAxiosArgs = await courseReviewCheckSubmissionGetAxiosParamCreator(
    professorName,
    courseCode,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 해당 교수의 해당 강의에 대해 강의평을 조회합니다. 열람권이 없으면 열람할 수 없습니다.
 * @summary 강의평 조회
 * @param {string} professorName 교수님 성함
 * @param {string} courseCode 학수번호
 * @param {string} criteria 검색 필터 기준
 * @param {string} direction 오름차순 / 내림차순
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseReviewGetFp = async (
  professorName: string,
  courseCode: string,
  criteria: string,
  direction: string,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCourseReviewsResponseDto>> => {
  const localVarAxiosArgs = await courseReviewGetAxiosParamCreator(
    professorName,
    courseCode,
    criteria,
    direction,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 내가 작성한 강의평을 조회합니다.
 * @summary 내 강의평 조회
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseReviewMyCourseReviewsGetFp = async (
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CourseReviewResponseDto>>> => {
  const localVarAxiosArgs = await courseReviewMyCourseReviewsGetAxiosParamCreator(options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 강의평을 추가합니다. 유저가 해당 강의에 대해 이미 강의평을 등록했으면 더 이상 등록되지 않습니다.
 * @summary 강의평 추가
 * @param {CreateCourseReviewRequestDto} createCourseReviewRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseReviewPostFp = async (
  createCourseReviewRequestDto: CreateCourseReviewRequestDto,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseReviewResponseDto>> => {
  const localVarAxiosArgs = await courseReviewPostAxiosParamCreator(
    createCourseReviewRequestDto,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 강의평에 추천을 누릅니다. 이미 추천한 강의평이면 추천이 취소됩니다. 내가 쓴 강의평은 추천할 수 없습니다.
 * @summary 강의평 추천
 * @param {number} courseReviewId
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseReviewRecommendCourseReviewIdPostFp = async (
  courseReviewId: number,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseReviewResponseDto>> => {
  const localVarAxiosArgs = await courseReviewRecommendCourseReviewIdPostAxiosParamCreator(
    courseReviewId,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 해당 교수의 해당 강의에 대한 강의평들을 종합한 강의평 요약을 조회합니다.
 * @summary 강의평 요약 조회
 * @param {string} professorName 교수님 성함
 * @param {string} courseCode 학수번호
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const courseReviewSummaryGetFp = async (
  professorName: string,
  courseCode: string,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCourseReviewSummaryResponseDto>> => {
  const localVarAxiosArgs = await courseReviewSummaryGetAxiosParamCreator(
    professorName,
    courseCode,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}

/**
 * CourseReviewApi - factory interface
 * @export
 */

export type CourseReviewCheckSubmissionGetRequestParams = {
  professorName: string
  courseCode: string
  options?: any
}

/**
 * 해당 강의에 대해 이미 강의평을 작성했으면 true, 아니면 false 반환
 * @summary 이미 해당 강의에 대해 강의평 작성했는 지 조회
 * @param {string} professorName 교수님 성함
 * @param {string} courseCode 학수번호
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const courseReviewCheckSubmissionGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CourseReviewCheckSubmissionGetRequestParams): AxiosPromise<boolean> => {
    return courseReviewCheckSubmissionGetFp(
      params.professorName,
      params.courseCode,
      params.options,
      configuration,
    ).then(request => request(axios, basePath))
  }
}

export type CourseReviewGetRequestParams = {
  professorName: string
  courseCode: string
  criteria: string
  direction: string
  options?: any
}

/**
 * 해당 교수의 해당 강의에 대해 강의평을 조회합니다. 열람권이 없으면 열람할 수 없습니다.
 * @summary 강의평 조회
 * @param {string} professorName 교수님 성함
 * @param {string} courseCode 학수번호
 * @param {string} criteria 검색 필터 기준
 * @param {string} direction 오름차순 / 내림차순
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const courseReviewGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CourseReviewGetRequestParams): AxiosPromise<GetCourseReviewsResponseDto> => {
    return courseReviewGetFp(
      params.professorName,
      params.courseCode,
      params.criteria,
      params.direction,
      params.options,
      configuration,
    ).then(request => request(axios, basePath))
  }
}

export type CourseReviewMyCourseReviewsGetRequestParams = {
  options?: any
}

/**
 * 내가 작성한 강의평을 조회합니다.
 * @summary 내 강의평 조회
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const courseReviewMyCourseReviewsGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params?: { options?: any }): AxiosPromise<Array<CourseReviewResponseDto>> => {
    return courseReviewMyCourseReviewsGetFp(params?.options, configuration).then(request => request(axios, basePath))
  }
}

export type CourseReviewPostRequestParams = {
  createCourseReviewRequestDto: CreateCourseReviewRequestDto
  options?: any
}

/**
 * 강의평을 추가합니다. 유저가 해당 강의에 대해 이미 강의평을 등록했으면 더 이상 등록되지 않습니다.
 * @summary 강의평 추가
 * @param {CreateCourseReviewRequestDto} createCourseReviewRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const courseReviewPost = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CourseReviewPostRequestParams): AxiosPromise<CourseReviewResponseDto> => {
    return courseReviewPostFp(params.createCourseReviewRequestDto, params.options, configuration).then(request =>
      request(axios, basePath),
    )
  }
}

export type CourseReviewRecommendCourseReviewIdPostRequestParams = {
  courseReviewId: number
  options?: any
}

/**
 * 강의평에 추천을 누릅니다. 이미 추천한 강의평이면 추천이 취소됩니다. 내가 쓴 강의평은 추천할 수 없습니다.
 * @summary 강의평 추천
 * @param {number} courseReviewId
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const courseReviewRecommendCourseReviewIdPost = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CourseReviewRecommendCourseReviewIdPostRequestParams): AxiosPromise<CourseReviewResponseDto> => {
    return courseReviewRecommendCourseReviewIdPostFp(params.courseReviewId, params.options, configuration).then(
      request => request(axios, basePath),
    )
  }
}

export type CourseReviewSummaryGetRequestParams = {
  professorName: string
  courseCode: string
  options?: any
}

/**
 * 해당 교수의 해당 강의에 대한 강의평들을 종합한 강의평 요약을 조회합니다.
 * @summary 강의평 요약 조회
 * @param {string} professorName 교수님 성함
 * @param {string} courseCode 학수번호
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const courseReviewSummaryGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CourseReviewSummaryGetRequestParams): AxiosPromise<GetCourseReviewSummaryResponseDto> => {
    return courseReviewSummaryGetFp(params.professorName, params.courseCode, params.options, configuration).then(
      request => request(axios, basePath),
    )
  }
}
