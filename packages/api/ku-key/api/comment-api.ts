/* tslint:disable */
/* eslint-disable */
/**
 * KU-KEY API
 * API for KU-KEY service
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, toPathString, createRequestFunction } from '../common'
// @ts-ignore
import { COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base'

// @ts-ignore
import { CreateCommentRequestDto } from '../models'
// @ts-ignore
import { CreateReportRequestDto } from '../models'
// @ts-ignore
import { CreateReportResponseDto } from '../models'
// @ts-ignore
import { DeleteCommentResponseDto } from '../models'
// @ts-ignore
import { GetCommentResponseDto } from '../models'
// @ts-ignore
import { GetMyCommentListResponseDto } from '../models'
// @ts-ignore
import { LikeCommentResponseDto } from '../models'
// @ts-ignore
import { UpdateCommentRequestDto } from '../models'
/**
 * CommentApi - axios parameter creator
 * @export
 */
/**
 * 댓글을 삭제합니다.
 * @summary 댓글 삭제
 * @param {number} commentId 댓글의 고유 ID
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const commentCommentIdDeleteAxiosParamCreator = async (
  commentId: number,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/comment/{commentId}`.replace(`{${'commentId'}}`, encodeURIComponent(String(commentId)))
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 댓글을 좋아요 합니다. 이미 눌렀다면 취소합니다.
 * @summary 댓글 좋아요
 * @param {number} commentId 댓글의 고유 ID
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const commentCommentIdLikePostAxiosParamCreator = async (
  commentId: number,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/comment/{commentId}/like`.replace(`{${'commentId'}}`, encodeURIComponent(String(commentId)))
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 댓글을 수정합니다.
 * @summary 댓글 수정
 * @param {number} commentId 댓글의 고유 ID
 * @param {UpdateCommentRequestDto} updateCommentRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const commentCommentIdPatchAxiosParamCreator = async (
  commentId: number,
  updateCommentRequestDto: UpdateCommentRequestDto,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/comment/{commentId}`.replace(`{${'commentId'}}`, encodeURIComponent(String(commentId)))
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  localVarHeaderParameter['Content-Type'] = 'application/json'

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
  localVarRequestOptions.data = updateCommentRequestDto || undefined

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 댓글을 신고합니다
 * @summary 댓글 신고
 * @param {number} commentId 댓글의 고유 ID
 * @param {CreateReportRequestDto} createReportRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const commentCommentIdReportPostAxiosParamCreator = async (
  commentId: number,
  createReportRequestDto: CreateReportRequestDto,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/comment/{commentId}/report`.replace(`{${'commentId'}}`, encodeURIComponent(String(commentId)))
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any

  localVarHeaderParameter['Content-Type'] = 'application/json'

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
  localVarRequestOptions.data = createReportRequestDto || undefined

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 내가 쓴 댓글 목록을 조회합니다.
 * @summary 내가 쓴 댓글 목록 조회
 * @param {number} [take] 한 페이지에 담을 데이터 수, default &#x3D; 10
 * @param {string} [cursor] 커서 값, 14자리 숫자로 이루어진 문자열, 없으면 첫페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const commentMyGetAxiosParamCreator = async (
  take?: number,
  cursor?: string,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/comment/my`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (take !== undefined) {
    localVarQueryParameter['take'] = take
  }

  if (cursor !== undefined) {
    localVarQueryParameter['cursor'] = cursor
  }

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}
/**
 * 댓글을 작성합니다.
 * @summary 댓글 작성
 * @param {number} postId 댓글을 달고자 하는 게시글 ID
 * @param {CreateCommentRequestDto} createCommentRequestDto
 * @param {number} [parentCommentId] 답글을 달고자 하는 댓글 ID
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const commentPostAxiosParamCreator = async (
  postId: number,
  createCommentRequestDto: CreateCommentRequestDto,
  parentCommentId?: number,
  options: AxiosRequestConfig = {},
  configuration?: Configuration,
): Promise<RequestArgs> => {
  const localVarPath = `/comment`
  // use dummy base URL string because the URL constructor only accepts absolute URLs.
  const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
  let baseOptions
  if (configuration) {
    baseOptions = configuration.baseOptions
  }

  const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
  const localVarHeaderParameter = {} as any
  const localVarQueryParameter = {} as any
  if (postId !== undefined) {
    localVarQueryParameter['postId'] = postId
  }

  if (parentCommentId !== undefined) {
    localVarQueryParameter['parentCommentId'] = parentCommentId
  }

  localVarHeaderParameter['Content-Type'] = 'application/json'

  setSearchParams(localVarUrlObj, localVarQueryParameter)
  let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
  localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
  localVarRequestOptions.data = createCommentRequestDto || undefined

  return {
    url: toPathString(localVarUrlObj),
    options: localVarRequestOptions,
  }
}

/**
 * CommentApi - functional programming interface
 * @export
 */
/**
 * 댓글을 삭제합니다.
 * @summary 댓글 삭제
 * @param {number} commentId 댓글의 고유 ID
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const commentCommentIdDeleteFp = async (
  commentId: number,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCommentResponseDto>> => {
  const localVarAxiosArgs = await commentCommentIdDeleteAxiosParamCreator(commentId, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 댓글을 좋아요 합니다. 이미 눌렀다면 취소합니다.
 * @summary 댓글 좋아요
 * @param {number} commentId 댓글의 고유 ID
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const commentCommentIdLikePostFp = async (
  commentId: number,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LikeCommentResponseDto>> => {
  const localVarAxiosArgs = await commentCommentIdLikePostAxiosParamCreator(commentId, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 댓글을 수정합니다.
 * @summary 댓글 수정
 * @param {number} commentId 댓글의 고유 ID
 * @param {UpdateCommentRequestDto} updateCommentRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const commentCommentIdPatchFp = async (
  commentId: number,
  updateCommentRequestDto: UpdateCommentRequestDto,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCommentResponseDto>> => {
  const localVarAxiosArgs = await commentCommentIdPatchAxiosParamCreator(
    commentId,
    updateCommentRequestDto,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 댓글을 신고합니다
 * @summary 댓글 신고
 * @param {number} commentId 댓글의 고유 ID
 * @param {CreateReportRequestDto} createReportRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const commentCommentIdReportPostFp = async (
  commentId: number,
  createReportRequestDto: CreateReportRequestDto,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateReportResponseDto>> => {
  const localVarAxiosArgs = await commentCommentIdReportPostAxiosParamCreator(
    commentId,
    createReportRequestDto,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 내가 쓴 댓글 목록을 조회합니다.
 * @summary 내가 쓴 댓글 목록 조회
 * @param {number} [take] 한 페이지에 담을 데이터 수, default &#x3D; 10
 * @param {string} [cursor] 커서 값, 14자리 숫자로 이루어진 문자열, 없으면 첫페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const commentMyGetFp = async (
  take?: number,
  cursor?: string,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMyCommentListResponseDto>> => {
  const localVarAxiosArgs = await commentMyGetAxiosParamCreator(take, cursor, options, configuration)
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}
/**
 * 댓글을 작성합니다.
 * @summary 댓글 작성
 * @param {number} postId 댓글을 달고자 하는 게시글 ID
 * @param {CreateCommentRequestDto} createCommentRequestDto
 * @param {number} [parentCommentId] 답글을 달고자 하는 댓글 ID
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
const commentPostFp = async (
  postId: number,
  createCommentRequestDto: CreateCommentRequestDto,
  parentCommentId?: number,
  options?: AxiosRequestConfig,
  configuration?: Configuration,
): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCommentResponseDto>> => {
  const localVarAxiosArgs = await commentPostAxiosParamCreator(
    postId,
    createCommentRequestDto,
    parentCommentId,
    options,
    configuration,
  )
  return createRequestFunction(localVarAxiosArgs, globalAxios, configuration)
}

/**
 * CommentApi - factory interface
 * @export
 */

export type CommentCommentIdDeleteRequestParams = {
  commentId: number
  options?: any
}

/**
 * 댓글을 삭제합니다.
 * @summary 댓글 삭제
 * @param {number} commentId 댓글의 고유 ID
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const commentCommentIdDelete = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CommentCommentIdDeleteRequestParams): AxiosPromise<DeleteCommentResponseDto> => {
    return commentCommentIdDeleteFp(params.commentId, params.options, configuration).then(request =>
      request(axios, basePath),
    )
  }
}

export type CommentCommentIdLikePostRequestParams = {
  commentId: number
  options?: any
}

/**
 * 댓글을 좋아요 합니다. 이미 눌렀다면 취소합니다.
 * @summary 댓글 좋아요
 * @param {number} commentId 댓글의 고유 ID
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const commentCommentIdLikePost = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CommentCommentIdLikePostRequestParams): AxiosPromise<LikeCommentResponseDto> => {
    return commentCommentIdLikePostFp(params.commentId, params.options, configuration).then(request =>
      request(axios, basePath),
    )
  }
}

export type CommentCommentIdPatchRequestParams = {
  commentId: number
  updateCommentRequestDto: UpdateCommentRequestDto
  options?: any
}

/**
 * 댓글을 수정합니다.
 * @summary 댓글 수정
 * @param {number} commentId 댓글의 고유 ID
 * @param {UpdateCommentRequestDto} updateCommentRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const commentCommentIdPatch = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CommentCommentIdPatchRequestParams): AxiosPromise<GetCommentResponseDto> => {
    return commentCommentIdPatchFp(
      params.commentId,
      params.updateCommentRequestDto,
      params.options,
      configuration,
    ).then(request => request(axios, basePath))
  }
}

export type CommentCommentIdReportPostRequestParams = {
  commentId: number
  createReportRequestDto: CreateReportRequestDto
  options?: any
}

/**
 * 댓글을 신고합니다
 * @summary 댓글 신고
 * @param {number} commentId 댓글의 고유 ID
 * @param {CreateReportRequestDto} createReportRequestDto
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const commentCommentIdReportPost = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CommentCommentIdReportPostRequestParams): AxiosPromise<CreateReportResponseDto> => {
    return commentCommentIdReportPostFp(
      params.commentId,
      params.createReportRequestDto,
      params.options,
      configuration,
    ).then(request => request(axios, basePath))
  }
}

export type CommentMyGetRequestParams = {
  take?: number
  cursor?: string
  options?: any
}

/**
 * 내가 쓴 댓글 목록을 조회합니다.
 * @summary 내가 쓴 댓글 목록 조회
 * @param {number} [take] 한 페이지에 담을 데이터 수, default &#x3D; 10
 * @param {string} [cursor] 커서 값, 14자리 숫자로 이루어진 문자열, 없으면 첫페이지
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const commentMyGet = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CommentMyGetRequestParams): AxiosPromise<GetMyCommentListResponseDto> => {
    return commentMyGetFp(params.take, params.cursor, params.options, configuration).then(request =>
      request(axios, basePath),
    )
  }
}

export type CommentPostRequestParams = {
  postId: number
  createCommentRequestDto: CreateCommentRequestDto
  parentCommentId?: number
  options?: any
}

/**
 * 댓글을 작성합니다.
 * @summary 댓글 작성
 * @param {number} postId 댓글을 달고자 하는 게시글 ID
 * @param {CreateCommentRequestDto} createCommentRequestDto
 * @param {number} [parentCommentId] 답글을 달고자 하는 댓글 ID
 * @param {*} [options] Override http request option.
 * @throws {RequiredError}
 */
export const commentPost = ({
  configuration,
  basePath,
  axios,
}: {
  configuration?: Configuration
  basePath?: string
  axios?: AxiosInstance
}) => {
  return (params: CommentPostRequestParams): AxiosPromise<GetCommentResponseDto> => {
    return commentPostFp(
      params.postId,
      params.createCommentRequestDto,
      params.parentCommentId,
      params.options,
      configuration,
    ).then(request => request(axios, basePath))
  }
}
